<!-- (0052)SetLength -->
<html oncontextmenu="return false">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Smart Pascal : SetLength command</title>
<meta name="Description" content="">
<meta name="Keywords" content="Delphi, Delphi Programming, Basics, Keyword, Command, SetLength, RTL ">

<link rel="stylesheet" type="text/css" href="css/delphi.css" />

</head>
<body bgcolor="#FFFFFF">
<table width="984" cellpadding="0" cellspacing="0" border="0" align="center">
<tr>
<td>
<table width="100%" cellpadding="5" cellspacing="0" border="0" align="center"><tr>
<td>
<b><a href="index.htm"><font color="#A00000" size="6">Smart</font></a><font color="#000000" size="2"><a href="index.htm">Pascal</a></font></b>
</tr>

<tr height="50" valign="top" bgcolor="#DDDDDD">

<td><font color="#0000A0" face="Courier New" size="5"><b>SetLength</b><br><font face="Arial,Helvetica,Sans-Serif" size="1">Procedure</font></font></td>

<td align="center"><font color="#444444" face="Courier New" size="4">Changes the size of a string, or the size(s) of an array</font></td>

<td align="right"><font color="#000000" face="Arial,Helvetica,Sans-Serif" size="3"><b>System</b> unit</font></td>

</tr>
</table>
</td>
</tr>
<tr>
<td>
<table width="100%" border="0" cellpadding="5" cellspacing="0" align="center" bgcolor="#F8F8F8">
<tr valign="top">

<td width="15" align="right"><font face="Courier New" size="2" color="#FF0000"><b>1</b></font></td>

<td><font face="Courier New" size="2">&nbsp;procedure&nbsp;<font color="#0000A0"><b>SetLength</b></font>

(
<b>var StringToChange </b> : string;<b> NewLength </b> : Integer
)
;</font></td>

</tr>

<tr valign="top">
<td width="15" align="right"><font face="Courier New" size="2" color="#FF0000"><b>2</b></font></td>

<td><font face="Courier New" size="2">&nbsp;procedure&nbsp;<font color="#0000A0"><b>SetLength</b></font>&nbsp;(
<b>var ArrayToChange </b> : Array type;<b> Dim1Length </b> : Integer {;<b>Dim2Length </b> : Integer; ...}
) ;</font></td>

</tr>

</table>
</td>
</tr>
<tr height="10"><td></td></tr>
</table>
<table width="984" border="0" cellspacing="0" cellpadding="0" align="center">
<tr valign="top">
<td width="380">
<table border="0" cellpadding="7" cellspacing="0">
<tr height="30"><td class="title" bgcolor="#FEF5B5"><b>Description</b></td></tr>
<tr bgcolor="#FFFEEB"><td>
cThe <font color=#996600><b>SetLength</b></font> procedure changes the size of a string, single dimensional dynamic array, or multidimensional dynamic array.
<br>&nbsp;<br>
<font color=#FF0000><b>Version 1</b></font>
<br>&nbsp;<br>
When changing the size of a string <b>StringToChange</b>, the new size <b>NewLength</b> may be smaller, the same or larger than the existing string. In all cases, the size is in characters, and a new string is created regardless.
<br>&nbsp;<br>
If the string is shorter, it gets truncated. If longer, the extra characters are not initialised. This can create odd effects - see the first example.
<br>&nbsp;<br>
<font color=#FF0000><b>Version 2</b></font>
<br>&nbsp;<br>
A dynamic array is one that is not declared with a fixed size. Such a declaration creates a pointer only. Even a multi-dimensional dynamic array starts as a single, unitialised pointer. A multidimensional array is really just a single dimensional array that has arrays as elements.
<br>&nbsp;<br>
<n>SetLength</b> sets the length of the dimensions <b>Dim1Length, Dim2Length ...</b> of the <b>ArrayToChange</b>. This may be performed multiple times - not just on an unitialised array. Subsequent calls will lose data, or add extra space. This extra space is only initialised if it contains strings, interfaces, or Variants.
<br>&nbsp;<br>
<b>Dim1Length</b> refers to the left, outer dimension of the array.
</td></tr>

<tr height="10"><td></td></tr>
<tr height="30" bgcolor="#DADAF0"><td class="h2"><b>Related commands</b></td></tr>
<tr bgcolor="#F9F9FF"><td>
<table cellpadding="0" cellspacing="0">

<tr valign="top">
<td><b><a href="copy.htm">Copy</a></b></td>
<td width="8"></td>
<td align="left">Create a copy of part of  a string or an array</td>
</tr>

<tr valign="top">
<td><b><a href="length.htm">Length</a></b></td>
<td width="8"></td>
<td align="left">Return the number of elements in an array or string</td>
</tr>

<tr valign="top">
<td><b><a href="setstring.htm">SetString</a></b></td>
<td width="8"></td>
<td align="left">Copies characters from a buffer into a string</td>
</tr>

<tr valign="top">
<td><b><a href="slice.htm">Slice</a></b></td>
<td width="8"></td>
<td align="left">Creates a slice of an array as an Open Array parameter</td>
</tr>

</table>
</td>
</tr>

</table>
</td>
<td width="8">&nbsp;</td>

<td width="690">
<table width="100%" border="0" cellpadding="6" cellspacing="0">
<tr height="30"><td class="h1" bgcolor="#BCF6BB"><a name="Ex1"></a><b>Example code : Make a string smaller or longer</b></tr>
<tr bgcolor="#FAFAFA"><td><font face="Courier New" size="2">
<b> var</b><br>
&nbsp;&nbsp;myString : string;<br>
&nbsp;&nbsp;onPos&nbsp;&nbsp;&nbsp;&nbsp;: Integer;<br><b>
</b><br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Set up my string to hold a well known phrase</b></font><br>
&nbsp;&nbsp;myString := 'The cat sat on the mat';<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Display this string</b></font><br>
&nbsp;&nbsp;ShowMessage('"'+myString+'"');<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Now make the string longer</b></font><br>
&nbsp;&nbsp;<font color=#C00000><b>SetLength</b></font>(myString, 25);<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Display this string again</b></font><br>&nbsp;&nbsp;<font color=#008000><b>// Note that the string is prematurely terminated</b></font><br>&nbsp;&nbsp;<font color=#008000><b>// This is because the extra characters are not initialised</b></font><br>
&nbsp;&nbsp;ShowMessage('"'+myString+'"');<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Now make the string shorter - chop from 'sat' onwards</b></font><br>
&nbsp;&nbsp;onPos := AnsiPos('sat', myString);<br>
&nbsp;&nbsp;<font color=#C00000><b>SetLength</b></font>(myString, onPos-1);<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Display this string again</b></font><br>&nbsp;&nbsp;<font color=#008000><b>// Now the string is fully initialised</b></font><br>
&nbsp;&nbsp;ShowMessage('"'+myString+'"');<br><b>
end;</b><br>
</font></td></tr>
<tr bgcolor="#D2ECCF">
 
<td align="right"><a href="setlength&expandcode1=yes.htm#Ex1"><font face="Arial,Helvetica,Sans-Serif" size="1">Show full unit code</font></a></td>

</tr>
<tr bgcolor="#D2ECCF"><td><font face="Courier New" size="2">
&nbsp;&nbsp;&nbsp;"The cat sat on the mat"<br>&nbsp;&nbsp;
"The cat sat on the mat<br>&nbsp;&nbsp;
"The cat "<br>
&nbsp;
</font></td></tr>

<tr height="10"><td></td></tr>
<tr height="30"><td class="h1" bgcolor="#BCF6BB"><a name="Ex2"></a><b>Example code : Setting the length of single and multi-dimensional arrays</b></tr>
<tr bgcolor="#FAFAFA"><td><font face="Courier New" size="2">
<b> var</b><br>
&nbsp;&nbsp;singleArray : array of string;<br>
&nbsp;&nbsp;multiArray&nbsp;&nbsp;: array of array of Word;<br>
&nbsp;&nbsp;i, j : Integer;<br><b>
</b><br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Set the length of a single dimension array</b></font><br>
&nbsp;&nbsp;<font color=#C00000><b>SetLength</b></font>(singleArray, 4);<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Now fill it up : note that dynamic arrays start at 0</b></font><br>
&nbsp;&nbsp;ShowMessage('Single dimensional array :');<br>
&nbsp;&nbsp;for i := 0 to 3 do<br>
&nbsp;&nbsp;begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;singleArray[i] := 'String '+IntToStr(i);<br>
&nbsp;&nbsp;&nbsp;&nbsp;ShowMessage('Element '+IntToStr(i)+' = '+singleArray[i]);<br>
&nbsp;&nbsp;end;<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Set the length of a multi dimensional array</b></font><br>
&nbsp;&nbsp;<font color=#C00000><b>SetLength</b></font>(multiArray, 2, 3);<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Now fill it up</b></font><br>
&nbsp;&nbsp;ShowMessage('Multi-dimensional array :');<br>
&nbsp;&nbsp;for i := 0 to 1 do<br>
&nbsp;&nbsp;&nbsp;&nbsp;for j := 0 to 2 do<br>
&nbsp;&nbsp;&nbsp;&nbsp;begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;multiArray[i,j] := i + j;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShowMessage('Element '+IntToStr(i)+','+IntToStr(j)+' = '+<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntToStr(multiArray[i,j]));<br>
&nbsp;&nbsp;&nbsp;&nbsp;end;<br><b>
end;</b><br>
</font></td></tr>
<tr bgcolor="#D2ECCF">
 
<td align="right"><a href="setlength&expandcode2=yes.htm#Ex2"><font face="Arial,Helvetica,Sans-Serif" size="1">Show full unit code</font></a></td>

</tr>
<tr bgcolor="#D2ECCF"><td><font face="Courier New" size="2">
&nbsp;&nbsp;&nbsp;Single dimensional array :<br>&nbsp;&nbsp;
Element 0 = 0<br>&nbsp;&nbsp;
Element 1 = 1<br>&nbsp;&nbsp;
Element 2 = 2<br>&nbsp;&nbsp;
Element 3 = 3<br>&nbsp;&nbsp;
Multi-dimensional array :<br>&nbsp;&nbsp;
Element 0,0 = 0<br>&nbsp;&nbsp;
Element 0,1 = 1<br>&nbsp;&nbsp;
Element 0,2 = 2<br>&nbsp;&nbsp;
Element 1,0 = 1<br>&nbsp;&nbsp;
Element 1,1 = 2<br>&nbsp;&nbsp;
Element 1,2 = 3<br>&nbsp;&nbsp;
<br>
&nbsp;
</font></td></tr>

</table>
</td>

</tr>
<tr height="10"><td>&nbsp;</td></tr>
</table>

</html>
