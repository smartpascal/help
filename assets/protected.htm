<!-- (0052)Protected -->
<html oncontextmenu="return false">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Smart Pascal : Protected command</title>
<meta name="Description" content="">
<meta name="Keywords" content="Delphi, Delphi Programming, Basics, Keyword, Command, Protected, RTL ">

<link rel="stylesheet" type="text/css" href="css/delphi.css" />

</head>
<body bgcolor="#FFFFFF">
<table width="984" cellpadding="0" cellspacing="0" border="0" align="center">
<tr>
<td>
<table width="100%" cellpadding="5" cellspacing="0" border="0" align="center"><tr>
<td>
<b><a href="index.htm"><font color="#A00000" size="6">Smart</font></a><font color="#000000" size="2"><a href="index.htm">Pascal</a></font></b>
</tr>

<tr height="50" valign="top" bgcolor="#DDDDDD">

<td><font color="#0000A0" face="Courier New" size="5"><b>Protected</b><br><font face="Arial,Helvetica,Sans-Serif" size="1">Directive</font></font></td>

<td align="center"><font color="#444444" face="Courier New" size="4">Starts a section of class private data accesible to sub-classes</font></td>

</tr>
</table>
</td>
</tr>
<tr>
<td>
<table width="100%" border="0" cellpadding="5" cellspacing="0" align="center" bgcolor="#F8F8F8">
<tr valign="top">

<td><font face="Courier New" size="2">&nbsp;
type Class declaration<br>&nbsp;
<b>Protected</b><br>&nbsp;
&nbsp;&nbsp;Field | Property | Method declaration<br>&nbsp;
 {...}<br>&nbsp;
end;
</font></td>

</tr>

</table>
</td>
</tr>
<tr height="10"><td></td></tr>
</table>
<table width="984" border="0" cellspacing="0" cellpadding="0" align="center">
<tr valign="top">
<td width="380">
<table border="0" cellpadding="7" cellspacing="0">
<tr height="30"><td class="title" bgcolor="#FEF5B5"><b>Description</b></td></tr>
<tr bgcolor="#FFFEEB"><td>
The <font color=#996600><b>Protected</b></font> directive starts a declaration section of a class definition. In a protected section, <b>Fields, Properties</b> and <b>Methods</b> are declared to be accessible to this class and classes descending from it. But not accessible externally by class users.
<br>&nbsp;<br>
It is similar to the <b>Private</b> directive - it hides the internal implementation of a class, but does not hide such data and methods from subclasses.
<br>&nbsp;<br>
In general, most data and methods internal to a class should be defined in a <font color=#996600><b>Protected</b></font> section. This gives subclasses often useful access to these. Only use <b>Private</b> when you are sure that you want to keep stuff entirely local to the current class/unit. This may be true when a subclass would want to be shielded from parent class complexities.
<br>&nbsp;<br>
You might want to make protected methods <b>virtual</b> to allow subclasses to alter them to suit their needs.
</td></tr>

<tr height="10"><td></td></tr>
<tr height="30" bgcolor="#DADAF0"><td class="h2"><b>Related commands</b></td></tr>
<tr bgcolor="#F9F9FF"><td>
<table cellpadding="0" cellspacing="0">

<tr valign="top">
<td><b><a href="function.htm">Function</a></b></td>
<td width="8"></td>
<td align="left">Defines a subroutine that returns a value</td>
</tr>

<tr valign="top">
<td><b><a href="private.htm">Private</a></b></td>
<td width="8"></td>
<td align="left">Starts the section of private data and methods in a class</td>
</tr>

<tr valign="top">
<td><b><a href="procedure.htm">Procedure</a></b></td>
<td width="8"></td>
<td align="left">Defines a subroutine that does not return a value</td>
</tr>

<tr valign="top">
<td><b><a href="property.htm">Property</a></b></td>
<td width="8"></td>
<td align="left">Defines controlled access to class fields</td>
</tr>

<tr valign="top">
<td><b><a href="public.htm">Public</a></b></td>
<td width="8"></td>
<td align="left">Starts an externally accessible section of a class</td>
</tr>

<tr valign="top">
<td><b><a href="published.htm">Published</a></b></td>
<td width="8"></td>
<td align="left">Starts a published externally accessible section of a class</td>
</tr>

<tr valign="top">
<td><b><a href="type.htm">Type</a></b></td>
<td width="8"></td>
<td align="left">Defines a new category of variable or process</td>
</tr>

</table>
</td>
</tr>

</table>
</td>
<td width="8">&nbsp;</td>

<td width="690">
<table width="100%" border="0" cellpadding="6" cellspacing="0">
<tr height="30"><td class="h1" bgcolor="#BCF6BB"><a name="Ex1"></a><b>Example code : A sublass that uses a protected method to access private data in the parent clas</b></tr>
<tr bgcolor="#FAFAFA"><td><font face="Courier New" size="2">
<font color=#008000><b>// Full Unit code.</b></font><br><font color=#008000><b>// -----------------------------------------------------------</b></font><br><font color=#008000><b>// You must store this code in a unit called Unit1 with a form</b></font><br><font color=#008000><b>// called Form1 that has an OnCreate event called FormCreate.</b></font><br><b>
</b><br><b>
unit Unit1;</b><br><b>
</b><br><b>
interface</b><br><b>
</b><br><b>
uses</b><br>
&nbsp;&nbsp;Forms, Dialogs, Classes, Controls, StdCtrls, SysUtils;<br><b>
</b><br><b>
type</b><br>&nbsp;&nbsp;<font color=#008000><b>// Define a base TSquare class :</b></font><br>&nbsp;&nbsp;<font color=#008000><b>// It has private data that can only be set by a protected method</b></font><br>
&nbsp;&nbsp;TSquare = class<br>&nbsp;&nbsp;private&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color=#008000><b>// Only known to the parent class</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;squareArea : Integer;<br>&nbsp;&nbsp;<font color=#C00000><b>Protected</b></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color=#008000><b>// Known to all classes in the hierarachy</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;squareWidth, squareHeight : Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;procedure setArea;<br>&nbsp;&nbsp;public&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#008000><b>// Known externally by class users</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;property width&nbsp;&nbsp;: Integer read squareWidth;<br>
&nbsp;&nbsp;&nbsp;&nbsp;property height : Integer read squareHeight;<br>
&nbsp;&nbsp;&nbsp;&nbsp;property area&nbsp;&nbsp; : Integer read squareArea;<br>&nbsp;&nbsp;published&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color=#008000><b>// Known externally : has run time info also</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;constructor Create(width, height : Integer);<br>
&nbsp;&nbsp;end;<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Define a descendant type :</b></font><br>&nbsp;&nbsp;<font color=#008000><b>// It must use the parent protected method to set the</b></font><br>&nbsp;&nbsp;<font color=#008000><b>// private area of the square</b></font><br>
&nbsp;&nbsp;TChangeableSquare = class(TSquare)<br>
&nbsp;&nbsp;public<br>
&nbsp;&nbsp;&nbsp;&nbsp;procedure ChangeSize(newWidth, newHeight : Integer);<br>
&nbsp;&nbsp;end;<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Define the form class used by this unit</b></font><br>
&nbsp;&nbsp;TForm1 = class(TForm)<br>
&nbsp;&nbsp;&nbsp;&nbsp;procedure FormCreate(Sender: TObject);<br>
&nbsp;&nbsp;private<br>
&nbsp;&nbsp;&nbsp;&nbsp;{ Private declarations }<br>
&nbsp;&nbsp;public<br>
&nbsp;&nbsp;&nbsp;&nbsp;{ Public declarations }<br>
&nbsp;&nbsp;end;<br><b>
</b><br><b>
var</b><br>
&nbsp;&nbsp;Form1: TForm1;<br><b>
</b><br><b>
implementation</b><br><b>
{$R *.dfm} // Include form definitions</b><br><b>
</b><br><font color=#008000><b>// Create the TSquare object</b></font><br><b>
constructor TSquare.Create(width, height: Integer);</b><br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Save the width and height in protected fields</b></font><br>
&nbsp;&nbsp;squareWidth&nbsp;&nbsp;:= width;<br>
&nbsp;&nbsp;squareHeight := height;<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// And calculate the square area</b></font><br>
&nbsp;&nbsp;setArea;<br><b>
end;</b><br><b>
</b><br><font color=#008000><b>// Change the TSquare dimensions</b></font><br><b>
procedure TChangeableSquare.ChangeSize(newWidth, newHeight: Integer);</b><br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Over-write the original width and height values</b></font><br>
&nbsp;&nbsp;squareWidth&nbsp;&nbsp;:= newWidth;<br>
&nbsp;&nbsp;squareHeight := newHeight;<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// And re-calculate the square area</b></font><br>
&nbsp;&nbsp;setArea;<br><b>
end;</b><br><b>
</b><br><font color=#008000><b>// Set the square size from its dimensions</b></font><br><b>
procedure TSquare.setArea;</b><br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Calculate the square area and store privately</b></font><br>
&nbsp;&nbsp;squareArea := width * height;<br><b>
end;</b><br><b>
</b><br><b>
procedure TForm1.FormCreate(Sender: TObject);</b><br><b>
var</b><br>
&nbsp;&nbsp;mySquare : TChangeableSquare;<br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Create a changeable square</b></font><br>
&nbsp;&nbsp;mySquare := TChangeableSquare.Create(30, 40);<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// What is the square area now?</b></font><br>
&nbsp;&nbsp;ShowMessage('Square 30,40 area = '+IntToStr(mySquare.area));<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Change the square dimensions</b></font><br>
&nbsp;&nbsp;mySquare.ChangeSize(10,20);<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// What is the square area now?</b></font><br>
&nbsp;&nbsp;ShowMessage('Square 10,20 area = '+IntToStr(mySquare.area));<br><b>
end;</b><br><b>
</b><br><b>
end.</b><br>
</font></td></tr>
<tr bgcolor="#D2ECCF">

</tr>
<tr bgcolor="#D2ECCF"><td><font face="Courier New" size="2">
&nbsp;&nbsp;&nbsp;Square 30,40 area = 1200<br>&nbsp;&nbsp;
Square 10,20 area = 200<br>
&nbsp;
</font></td></tr>

</table>
</td>

</tr>
<tr height="10"><td>&nbsp;</td></tr>
</table>

</html>
