<!-- (0054)Constructor -->
<html oncontextmenu="return false">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Smart Pascal : Constructor command</title>
<meta name="Description" content="">
<meta name="Keywords" content="Delphi, Delphi Programming, Basics, Keyword, Command, Constructor, RTL ">

<link rel="stylesheet" type="text/css" href="css/delphi.css" />

</head>
<body bgcolor="#FFFFFF">
<table width="984" cellpadding="0" cellspacing="0" border="0" align="center">
<tr>
<td>
<table width="100%" cellpadding="5" cellspacing="0" border="0" align="center"><tr>
<td>
<b><a href="index.htm"><font color="#A00000" size="6">Smart</font></a><font color="#000000" size="2"><a href="index.htm">Pascal</a></font></b>
</tr>

<tr height="50" valign="top" bgcolor="#DDDDDD">

<td><font color="#0000A0" face="Courier New" size="5"><b>Constructor</b><br><font face="Arial,Helvetica,Sans-Serif" size="1">Keyword</font></font></td>

<td align="center"><font color="#444444" face="Courier New" size="4">Defines the method used to create an object from a class</font></td>

</tr>
</table>
</td>
</tr>
<tr>
<td>
<table width="100%" border="0" cellpadding="5" cellspacing="0" align="center" bgcolor="#F8F8F8">
<tr valign="top">

<td width="15" align="right"><font face="Courier New" size="2" color="#FF0000"><b>1</b></font></td>

<td><font face="Courier New" size="2">&nbsp;
type Class declaration<br>&nbsp;
&nbsp;&nbsp;...<br>&nbsp;
&nbsp;&nbsp;<b>Constructor</b> Name; {Overload;}<br>&nbsp;
&nbsp;&nbsp;...<br>&nbsp;
end;
</font></td>

</tr>

<tr valign="top">
<td width="15" align="right"><font face="Courier New" size="2" color="#FF0000"><b>2</b></font></td>

<td><font face="Courier New" size="2">&nbsp;
type Class declaration<br>&nbsp;
&nbsp;&nbsp;...<br>&nbsp;
&nbsp;&nbsp;<b>Constructor</b> Name(Arguments); {Overload;}<br>&nbsp;
&nbsp;&nbsp;...<br>&nbsp;
end;
</font></td>

</tr>

</table>
</td>
</tr>
<tr height="10"><td></td></tr>
</table>
<table width="984" border="0" cellspacing="0" cellpadding="0" align="center">
<tr valign="top">
<td width="380">
<table border="0" cellpadding="7" cellspacing="0">
<tr height="30"><td class="title" bgcolor="#FEF5B5"><b>Description</b></td></tr>
<tr bgcolor="#FFFEEB"><td>
The <font color=#996600><b>Constructor</b></font> keyword defines a constructor procedure <b>Name</b> for a class.
<br>&nbsp;<br>
When creating an object, you call a <font color=#996600><b>Constructor</b></font> method of the <i>class</i>, not the object:
<br>&nbsp;<br>
<font color=#008000>objectName := ClassName.Create(parms);</font>
<br>&nbsp;<br>
The <b>Name</b> for the constructor is normally <b>Create</b>, but is not restricted to this. It is very wise to keep to this name.
<br>&nbsp;<br>
An object may be constructed with or without arguments (see the example).
<br>&nbsp;<br>
Constructors may be defined in the public or published sections of the class definition.
<br>&nbsp;<br>
You may have multiple constructors, but by doing so, you can only define one of these as <b>Published</b>. With multiple constructors, each must be suffixed with the <b>Overload</b> directive, as required by delphi.
<br>&nbsp;<br>
When implementing the constructor procedure, normally called <b>Create</b>, you should make it a habit of calling the parent constructor, for example
<br>&nbsp;<br>
<font color=#008000>constructor Create;<br>
&nbsp;&nbsp;inherited;<br>
&nbsp;&nbsp;...</font>
<br>&nbsp;<br>
This ensures that the resulting object is a safe instantiated instance of this parent class, even if the parent is <b>TObject</b>, which does nothing in its constructor. The sample code illustrates this plain variety of Inherited plus the version where the parent constructor has arguments.
</td></tr>

<tr height="10"><td></td></tr>
<tr height="30" bgcolor="#DADAF0"><td class="h2"><b>Related commands</b></td></tr>
<tr bgcolor="#F9F9FF"><td>
<table cellpadding="0" cellspacing="0">

<tr valign="top">
<td><b><a href="class.htm">Class</a></b></td>
<td width="8"></td>
<td align="left">Starts the declaration of a type of object class</td>
</tr>

<tr valign="top">
<td><b><a href="destructor.htm">Destructor</a></b></td>
<td width="8"></td>
<td align="left">Defines the method used to destroy an object</td>
</tr>

<tr valign="top">
<td><b><a href="function.htm">Function</a></b></td>
<td width="8"></td>
<td align="left">Defines a subroutine that returns a value</td>
</tr>

<tr valign="top">
<td><b><a href="inherited.htm">Inherited</a></b></td>
<td width="8"></td>
<td align="left">Used to call the parent class constructor or destructor method</td>
</tr>

<tr valign="top">
<td><b><a href="object.htm">Object</a></b></td>
<td width="8"></td>
<td align="left">Allows a subroutine data type to refer to an object method</td>
</tr>

<tr valign="top">
<td><b><a href="procedure.htm">Procedure</a></b></td>
<td width="8"></td>
<td align="left">Defines a subroutine that does not return a value</td>
</tr>

<tr valign="top">
<td><b><a href="tobject.htm">TObject</a></b></td>
<td width="8"></td>
<td align="left">The base class type that is ancestor to all other classes</td>
</tr>

</table>
</td>
</tr>

</table>
</td>
<td width="8">&nbsp;</td>

<td width="690">
<table width="100%" border="0" cellpadding="6" cellspacing="0">
<tr height="30"><td class="h1" bgcolor="#BCF6BB"><a name="Ex1"></a><b>Example code : Examples of constructors with and without arguments</b></tr>
<tr bgcolor="#FAFAFA"><td><font face="Courier New" size="2">
<font color=#008000><b>// Full Unit code.</b></font><br><font color=#008000><b>// -----------------------------------------------------------</b></font><br><font color=#008000><b>// You must store this code in a unit called Unit1 with a form</b></font><br><font color=#008000><b>// called Form1 that has an OnCreate event called FormCreate.</b></font><br><b>
</b><br><b>
unit Unit1;</b><br><b>
</b><br><b>
interface</b><br><b>
</b><br><b>
uses</b><br>
&nbsp;&nbsp;Forms, Dialogs, Classes, Controls, StdCtrls;<br><b>
</b><br><b>
type</b><br>&nbsp;&nbsp;<font color=#008000><b>// Define a parent class, base on TObject by default</b></font><br>
&nbsp;&nbsp;TFruit = class<br>
&nbsp;&nbsp;public<br>
&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;&nbsp; : string;<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color=#C00000><b>Constructor</b></font> Create; overload;&nbsp;&nbsp; <font color=#008000><b>// This constructor uses defaults</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color=#C00000><b>Constructor</b></font> Create(name : string); overload;<br>
&nbsp;&nbsp;end;<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Define a descendant types</b></font><br>
&nbsp;&nbsp;TApple = class(TFruit)<br>
&nbsp;&nbsp;public<br>
&nbsp;&nbsp;&nbsp;&nbsp;diameter : Integer;<br>
&nbsp;&nbsp;published<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color=#C00000><b>Constructor</b></font> Create(name : string; diameter : Integer);<br>
&nbsp;&nbsp;end;<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// The class for the form used by this unit</b></font><br>
&nbsp;&nbsp;TForm1 = class(TForm)<br>
&nbsp;&nbsp;&nbsp;&nbsp;procedure FormCreate(Sender: TObject);<br>
&nbsp;&nbsp;end;<br><b>
</b><br><b>
var</b><br>
&nbsp;&nbsp;Form1: TForm1;<br><b>
</b><br><b>
implementation</b><br><b>
{$R *.dfm} // Include form definitions</b><br><b>
</b><br><font color=#008000><b>// Create a fruit object - parameterless version</b></font><br><b>
constructor TFruit.Create;</b><br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Execute the parent (TObject) constructor first</b></font><br>&nbsp;&nbsp;inherited;&nbsp;&nbsp;<font color=#008000><b>// Call the parent Create method</b></font><br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Now set a default fruit name</b></font><br>
&nbsp;&nbsp;self.name := 'Fruit';<br><b>
end;</b><br><b>
</b><br><font color=#008000><b>// Create a fruit object - parameterised version</b></font><br><b>
constructor TFruit.Create(name: string);</b><br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Cannot execute the parent constructor - parms differ</b></font><br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// And save the fruit name</b></font><br>
&nbsp;&nbsp;self.name := name;<br><b>
end;</b><br><b>
</b><br><font color=#008000><b>// Create an apple object</b></font><br><b>
constructor TApple.Create(name: string; diameter : Integer);</b><br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Execute the parent (TFruit) constructor first</b></font><br>&nbsp;&nbsp;inherited Create(name);&nbsp;&nbsp;<font color=#008000><b>// Call the parent method</b></font><br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Now save the passed apple diameter</b></font><br>
&nbsp;&nbsp;self.diameter := diameter;<br><b>
end;</b><br><b>
</b><br><font color=#008000><b>// Main line code</b></font><br><b>
procedure TForm1.FormCreate(Sender: TObject);</b><br><b>
var</b><br>
&nbsp;&nbsp;fruit&nbsp;&nbsp;: TFruit;<br>
&nbsp;&nbsp;banana : TFruit;<br>
&nbsp;&nbsp;apple&nbsp;&nbsp;: TApple;<br><b>
</b><br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Create 3 different fruit objects</b></font><br>
&nbsp;&nbsp;fruit&nbsp;&nbsp;:= TFruit.Create;<br>
&nbsp;&nbsp;banana := TFruit.Create('Banana');<br>
&nbsp;&nbsp;apple&nbsp;&nbsp;:= TApple.Create('Pink Lady', 12);<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// See which of our objects are fruits</b></font><br>
&nbsp;&nbsp;if fruit&nbsp;&nbsp;Is TFruit then ShowMessage(fruit.name&nbsp;&nbsp;+' is a fruit');<br>
&nbsp;&nbsp;if banana Is TFruit then ShowMessage(banana.name +' is a fruit');<br>
&nbsp;&nbsp;if apple&nbsp;&nbsp;Is TFruit then ShowMessage(apple.name&nbsp;&nbsp;+' is a fruit');<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// See which objects are apples</b></font><br>
&nbsp;&nbsp;if fruit&nbsp;&nbsp;Is TApple then ShowMessage(fruit.name&nbsp;&nbsp; +' is an apple');<br>
&nbsp;&nbsp;if banana Is TApple then ShowMessage(banana.name&nbsp;&nbsp;+' is an apple');<br>
&nbsp;&nbsp;if apple&nbsp;&nbsp;Is TApple then ShowMessage(apple.name&nbsp;&nbsp; +' is an apple');<br><b>
end;</b><br><b>
end.</b><br>
</font></td></tr>
<tr bgcolor="#D2ECCF">

</tr>
<tr bgcolor="#D2ECCF"><td><font face="Courier New" size="2">
&nbsp;&nbsp;&nbsp;Fruit is a fruit<br>&nbsp;&nbsp;
Banana is a fruit<br>&nbsp;&nbsp;
Pink Lady is a fruit<br>&nbsp;&nbsp;
Pink Lady is an apple<br>
&nbsp;
</font></td></tr>

</table>
</td>

</tr>
<tr height="10"><td>&nbsp;</td></tr>
</table>

</html>
