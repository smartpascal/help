<!DOCTYPE html>
<html>
<head>
<title></title>
<meta name=viewport content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />   
<link type="text/css" href="css/styles.css" rel="stylesheet" />
<link type="text/css" href="css/custom.css" rel="stylesheet" />
<link rel="stylesheet" title="Default" href="css/default.css"> 
<script type="text/javascript" src="js/jquery.js"></script>
<script src="js/highlight.min.js"></script>
<script src="js/delphi.min.js"></script>
<script src="js/javascript.min.js"></script>   
<script type="text/javascript">
hljs.tabReplace='    ';hljs.initHighlightingOnLoad();function showme(id){var divid=document.getElementById(id);if(divid.style.display=='block')divid.style.display='none';else divid.style.display='block';}
$(document).ready(function(){$("button").click(function(){$(this).text($(this).text()=='Show JS code'?'Hide JS code':'Show JS code');showme('widget');});});
</script>   
<style> 
html, body { margin:0; padding:0; background: #ffffff;} 
#idheader {width:100%; height:auto; padding: 0; margin: 0;position: fixed;top: 0;
z-index: 2;} 
#idheader table { background: #2C5D88; min-height: 59px }             
#idheader h1 { color: #FFF }     
#idnav {text-align: right; width: 158px; vertical-align: middle;} 
#idnav a { text-decoration: none }
#idnav span {display: inline-block;width: 24px;height: 24px;margin-left: 4px;
background:url('css/img/hm_webhelp_buttons_grey.png') top left no-repeat;} 
#idnav a span {background-image:url('css/img/hm_webhelp_buttons_white.png');} 
#idnav a span:hover {background-image:url('css/img/hm_webhelp_buttons_orange.png');} 
#idnav span.hmbtnprev { background-position: 0 -32px }
#idnav span.hmbtnnext { background-position: -24px -32px }
#idnav span.hmbtntop  { background-position: -48px -32px }
.language-css {background-color: #cd6a51;content: attr(rel);color: white;position: absolute;
width: 100%;background: #e18728;font-family: 'PT Serif', serif;padding: 5px 0;text-indent: 15px;font-size: 17px;font-weight: 300;line-height: 1.45;font-weight: 700;}
#checkoutbutton {
    background-color: #2C5D88;
  -moz-border-radius: 15px;
  -webkit-border-radius: 15px;
  color: #FFFFFF;
  border: 5px solid #e18728;
  padding: 2px;
  margin: 0px 0px 0px 25px;
}
#checkoutbutton:hover {opacity: 0.6; }
</style>
</head>
<body>
<div id="idheader">
<div id="idheaderbg">
<table style="width:100%;border:none;margin:0px;" cellspacing="0" cellpadding="0"> 
  <tr>
    <td class="topichead" style="text-align:left;">
      <h1 class="p_Heading1" style="page-break-after: avoid;"><span class="f_Heading1">Function Pointer ClassName</span></h1>
    </td>
    <td class="topichead" id="idnav">
      <a href="hm_pas2js187.htm"><span class="hmbtnprev"></span></a>
      <a href="index.htm" title="Parent Chapter"><span class="hmbtntop"></span></a>
      <a href="hm_pas2js189.htm"><span class="hmbtnnext"></span></a>
     </td>  
  </tr>  
</table>
</div>
</div>  

<br/><br/>
<table style="width:100%;border:none;margin:10px;" cellspacing="0" cellpadding="0">
  <tr>
	<td>
	Function Pointer ClassName | ClassType
	</td>
  </tr>
</table>
	
<pre><span id="code" class="language-css">Smart pascal source code</span><br>
<code class="delphi" style="background-color: #FFFEEB;">
type
  TClassA = class(TObject);

type
  TClassB = class
  end;

var a1: array of function: TClass;

a1.Add(TObject.ClassType);
a1.Add(TClassA.ClassType);
a1.Add(TClassB.ClassType);

//var a2: array of function: String;
  var a2: array of String;

a2.Add(TObject.ClassName);
a2.Add(TClassA.ClassName);
a2.Add(TClassB.ClassName);

var i: Integer;

for i := 0 to High(a1) do
  WriteLn(a1[i]().ClassName);

for i := 0 to High(a2) do
  WriteLn(a2[i]);

{<<< RESULT - CONSOLE LOG >>>
-----------------------------
TObject
TClassA
TClassB
TObject
TClassA
TClassB
-----------------------------
{<<<<<<<<< THE END >>>>>>>>>}
</code></pre>
<button type="button" id="checkoutbutton">Show JS code</button>
<div id="widget" style="display:none;">
<pre>
<code class="javascript">
var TObject={
	$ClassName: "TObject",
	$Parent: null,
	ClassName: function (s) { return s.$ClassName },
	ClassType: function (s) { return s },
	ClassParent: function (s) { return s.$Parent },
	$Init: function () {},
	Create: function (s) { return s },
	Destroy: function (s) { for (var prop in s) if (s.hasOwnProperty(prop)) delete s.prop },
	Destroy$: function(s) { return s.ClassType.Destroy(s) },
	Free: function (s) { if (s!==null) s.ClassType.Destroy(s) }
}
var Exception={
	$ClassName: "Exception",
	$Parent: TObject,
	$Init: function () { FMessage="" },
	Create: function (s,Msg) { s.FMessage=Msg; return s }
}
function $New(c) { var i={ClassType:c}; c.$Init(i); return i }
function $Event0(i,f) {
	var li=i,lf=f;
	return function() {
		return lf.call(li,li)
	}
}
function $DIdxR(a,i,z) {
	if (i<0) throw Exception.Create($New(Exception),"Lower bound exceeded! Index "+i.toString()+z);
	if (i>a.length) throw Exception.Create($New(Exception),"Upper bound exceeded! Index "+i.toString()+z);
	return a[i];
}
function $CheckFunc(i,z) { if (i) return i; throw Exception.Create($New(Exception),"Function pointer is nil"+z); }
function $Check(i,z) { if (i) return i; throw Exception.Create($New(Exception),"Object not instantiated"+z); }
function WriteLn(value) {
    if (window.console) { window.console.log(value); } };
function ClassName$1(Self$1) {
   return "Helper1."+TObject.ClassName($Check(Self$1,""));
}
var TClassB = {
   $ClassName:"TClassB",$Parent:TObject
   ,$Init:function ($) {
      TObject.$Init($);
   }
   ,Destroy:TObject.Destroy
};
var TClassA = {
   $ClassName:"TClassA",$Parent:TObject
   ,$Init:function ($) {
      TObject.$Init($);
   }
   ,Destroy:TObject.Destroy
};
var a1 = [],
   a2 = [],
   i = 0;
   
/*   MAIN JS CODE   */

a1.push($Event0(TObject, TObject.ClassType));
a1.push($Event0(TClassA, TObject.ClassType));
a1.push($Event0(TClassB, TObject.ClassType));
a2.push(ClassName$1(TObject));
a2.push(ClassName$1(TClassA));
a2.push(ClassName$1(TClassB));
var $temp1;
for (i = 0, $temp1 = a1.length; i < $temp1; i++) {
	WriteLn(ClassName$1($CheckFunc($DIdxR(a1, i, ""), "")()));
}
var $temp2;
for (i = 0, $temp2 = a2.length; i < $temp2; i++) {
	WriteLn($DIdxR(a2, i, ""));
}
</code></pre></div>
</div>
</body>
</html>
