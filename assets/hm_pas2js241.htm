<!DOCTYPE html>
<html>
<head>
<title></title>
<meta name=viewport content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />   
<link type="text/css" href="css/styles.css" rel="stylesheet" />
<link type="text/css" href="css/custom.css" rel="stylesheet" />
<link rel="stylesheet" title="Default" href="css/default.css"> 
<script type="text/javascript" src="js/jquery.js"></script>
<script src="js/highlight.min.js"></script>
<script src="js/delphi.min.js"></script>
<script src="js/javascript.min.js"></script>   
<script type="text/javascript">
hljs.tabReplace='    ';hljs.initHighlightingOnLoad();function showme(id){var divid=document.getElementById(id);if(divid.style.display=='block')divid.style.display='none';else divid.style.display='block';}
$(document).ready(function(){$("button").click(function(){$(this).text($(this).text()=='Show JS code'?'Hide JS code':'Show JS code');showme('widget');});});
</script>   
<style> 
html, body { margin:0; padding:0; background: #ffffff;} 
#idheader {width:100%; height:auto; padding: 0; margin: 0;position: fixed;top: 0;
z-index: 2;} 
#idheader table { background: #2C5D88; min-height: 59px }             
#idheader h1 { color: #FFF }     
#idnav {text-align: right; width: 158px; vertical-align: middle;} 
#idnav a { text-decoration: none }
#idnav span {display: inline-block;width: 24px;height: 24px;margin-left: 4px;
background:url('css/img/hm_webhelp_buttons_grey.png') top left no-repeat;} 
#idnav a span {background-image:url('css/img/hm_webhelp_buttons_white.png');} 
#idnav a span:hover {background-image:url('css/img/hm_webhelp_buttons_orange.png');} 
#idnav span.hmbtnprev { background-position: 0 -32px }
#idnav span.hmbtnnext { background-position: -24px -32px }
#idnav span.hmbtntop  { background-position: -48px -32px }
.language-css {background-color: #cd6a51;content: attr(rel);color: white;position: absolute;
width: 100%;background: #e18728;font-family: 'PT Serif', serif;padding: 5px 0;text-indent: 15px;font-size: 17px;font-weight: 300;line-height: 1.45;font-weight: 700;}
#checkoutbutton {
    background-color: #2C5D88;
  -moz-border-radius: 15px;
  -webkit-border-radius: 15px;
  color: #FFFFFF;
  border: 5px solid #e18728;
  padding: 2px;
  margin: 0px 0px 0px 25px;
}
#checkoutbutton:hover {opacity: 0.6; }
</style>
</head>
<body>
<div id="idheader">
<div id="idheaderbg">
<table style="width:100%;border:none;margin:0px;" cellspacing="0" cellpadding="0"> 
  <tr>
    <td class="topichead" style="text-align:left;">
      <h1 class="p_Heading1" style="page-break-after: avoid;"><span class="f_Heading1">Method Contracts</span></h1>
    </td>
    <td class="topichead" id="idnav">
      <a href="hm_pas2js240.htm"><span class="hmbtnprev"></span></a>
      <a href="index.htm" title="Parent Chapter"><span class="hmbtntop"></span></a>
      <a href="hm_pas2js242.htm"><span class="hmbtnnext"></span></a>
     </td>  
  </tr>  
</table>
</div>
</div>  

<br/><br/>
<table style="width:100%;border:none;margin:10px;" cellspacing="0" cellpadding="0">
  <tr>
	<td>
	Method Contracts |  require | ensure
	</td>
  </tr>
</table>
	
<pre><span id="code" class="language-css">Smart pascal source code</span><br>
<code class="delphi" style="background-color: #FFFEEB;">
type
  TBase = class
    procedure Check(i: Integer); virtual;
  end;

type
  TChild = class(TBase)
  end;

type
  TSubChild = class(TBase)
    procedure Check(i: Integer); override;
  end;

procedure TBase.Check(i: Integer);
require i > 0;
begin
  WriteLn('base ' + IntToStr(i));
  ensure i < 10;
end;

procedure TSubChild.Check(i: Integer);
begin
  WriteLn('subchild ' + IntToStr(i));
  ensure i < 5: 'was ' + IntToStr(i);
end;

var b = TBase.Create;
  WriteLn('TBase');
  b.Check(1);
try
  b.Check(-1);
except
  on E: Exception do
    WriteLn(E.Message);
end;
b.Check(7);
try
  b.Check(10);
except
  on E: Exception do
    WriteLn(E.Message);
end;

var c = TChild.Create;
  WriteLn('TChild');
  c.Check(1);
try
  c.Check(-1);
except
  on E: Exception do
    WriteLn(E.Message);
end;
c.Check(7);
try
  c.Check(10);
except
  on E: Exception do
    WriteLn(E.Message);
end;

var s = TSubChild.Create;
  WriteLn('TSubChild');
  s.Check(1);
try
  s.Check(-1);
except
  on E: Exception do
    WriteLn(E.Message);
end;
s.Check(4);
try
  s.Check(7);
except
  on E: Exception do
    WriteLn(E.Message);
end;
try
  s.Check(10);
except
  on E: Exception do
    WriteLn(E.Message);
end;

{<<< RESULT - CONSOLE LOG >>>
-----------------------------
TBase
base 1
Pre-condition failed in TBase.Check [line: 15, column: 4], i > 0
base 7
base 10
Post-condition failed in TBase.Check [line: 19, column: 4], i < 10
TChild
base 1
Pre-condition failed in TBase.Check [line: 15, column: 4], i > 0
base 7
base 10
Post-condition failed in TBase.Check [line: 19, column: 4], i < 10
TSubChild
subchild 1
Pre-condition failed in TBase.Check [line: 15, column: 4], i > 0
subchild 4
subchild 7
Post-condition failed in TSubChild.Check [line: 26, column: 4], was 7
subchild 10
Post-condition failed in TSubChild.Check [line: 26, column: 4], was 10
-----------------------------
{<<<<<<<<< THE END >>>>>>>>>}
</code></pre>
<button type="button" id="checkoutbutton">Show JS code</button>
<div id="widget" style="display:none;">
<pre>
<code class="javascript">
var TBase = {
   $ClassName:"TBase",$Parent:TObject
   ,$Init:function ($) {
      TObject.$Init($);
   }
   ,Check:function(Self, i) {
      if (!(i>0)) $CondFailed("Pre-condition failed in TBase.Check [line: 18, column: 9], ","i > 0");
      WriteLn(("base "+i.toString()));
      if (!(i<10)) $CondFailed("Post-condition failed in TBase.Check [line: 21, column: 10], ","i < 10");
   }
   ,Destroy:TObject.Destroy
   ,Check$:function($){return $.ClassType.Check.apply($.ClassType, arguments)}
};
var TSubChild = {
   $ClassName:"TSubChild",$Parent:TBase
   ,$Init:function ($) {
      TBase.$Init($);
   }
   ,Check:function(Self, i$1) {
      if (!(i>0)) $CondFailed("Pre-condition failed in TBase.Check [line: 18, column: 9], ","i > 0");
      WriteLn(("subchild "+i$1.toString()));
      if (!(i$1<5)) $CondFailed("Post-condition failed in TSubChild.Check [line: 27, column: 10], ",("was "+i$1.toString()));
      if (!(i<10)) $CondFailed("Post-condition failed in TBase.Check [line: 21, column: 10], ","i < 10");
   }
   ,Destroy:TObject.Destroy
   ,Check$:function($){return $.ClassType.Check.apply($.ClassType, arguments)}
};
var TChild = {
   $ClassName:"TChild",$Parent:TBase
   ,$Init:function ($) {
      TBase.$Init($);
   }
   ,Destroy:TObject.Destroy
   ,Check:TBase.Check
};
var b = null,
   c = null,
   s = null;

/* <<< main JS >>> */

   b = TObject.Create($New(TBase));
   WriteLn("TBase");
   TBase.Check$($Check(b,""),1);
   try {
      TBase.Check$($Check(b,""),-1);
   } catch ($e) {
      var E = $W($e);
      WriteLn($Check(E,"").FMessage)   }
   TBase.Check$($Check(b,""),7);
   try {
      TBase.Check$($Check(b,""),10);
   } catch ($e) {
      var E$1 = $W($e);
      WriteLn($Check(E$1,"").FMessage)   }
   c = TObject.Create($New(TChild));
   WriteLn("TChild");
   TBase.Check$($Check(c,""),1);
   try {
      TBase.Check$($Check(c,""),-1);
   } catch ($e) {
      var E$2 = $W($e);
      WriteLn($Check(E$2,"").FMessage)   }
   TBase.Check$($Check(c,""),7);
   try {
      TBase.Check$($Check(c,""),10);
   } catch ($e) {
      var E$3 = $W($e);
      WriteLn($Check(E$3,"").FMessage)   }
   s = TObject.Create($New(TSubChild));
   WriteLn("TSubChild");
   TBase.Check$($Check(s,""),1);
   try {
      TBase.Check$($Check(s,""),-1);
   } catch ($e) {
      var E$4 = $W($e);
      WriteLn($Check(E$4,"").FMessage)   }
   TBase.Check$($Check(s,""),4);
   try {
      TBase.Check$($Check(s,""),7);
   } catch ($e) {
      var E$5 = $W($e);
      WriteLn($Check(E$5,"").FMessage)   }
   try {
      TBase.Check$($Check(s,""),10);
   } catch ($e) {
      var E$6 = $W($e);
      WriteLn($Check(E$6,"").FMessage)   }
</code></pre></div>
</div>
</body>
</html>
