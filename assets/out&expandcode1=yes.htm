<!-- (0062)Out&ExpandCode1=Yes -->
<html oncontextmenu="return false">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Smart Pascal : Out command</title>
<meta name="Description" content="">
<meta name="Keywords" content="Delphi, Delphi Programming, Basics, Keyword, Command, Out, RTL ">

<link rel="stylesheet" type="text/css" href="css/delphi.css" />

</head>
<body bgcolor="#FFFFFF">
<table width="984" cellpadding="0" cellspacing="0" border="0" align="center">
<tr>
<td>
<table width="100%" cellpadding="5" cellspacing="0" border="0" align="center"><tr>
<td>
<b><a href="index.htm"><font color="#A00000" size="6">Smart</font></a><font color="#000000" size="2"><a href="index.htm">Pascal</a></font></b>
</tr>

<tr height="50" valign="top" bgcolor="#DDDDDD">

<td><font color="#0000A0" face="Courier New" size="5"><b>Out</b><br><font face="Arial,Helvetica,Sans-Serif" size="1">Directive</font></font></td>

<td align="center"><font color="#444444" face="Courier New" size="4">Identifies a routine parameter for output only</font></td>

</tr>
</table>
</td>
</tr>
<tr>
<td>
<table width="100%" border="0" cellpadding="5" cellspacing="0" align="center" bgcolor="#F8F8F8">
<tr valign="top">

<td><font face="Courier New" size="2">&nbsp;
Routine name(... <b>Out</b> OutputVarName : type; ...)
</font></td>

</tr>

</table>
</td>
</tr>
<tr height="10"><td></td></tr>
</table>
<table width="984" border="0" cellspacing="0" cellpadding="0" align="center">
<tr valign="top">
<td width="380">
<table border="0" cellpadding="7" cellspacing="0">
<tr height="30"><td class="title" bgcolor="#FEF5B5"><b>Description</b></td></tr>
<tr bgcolor="#FFFEEB"><td>
The <font color=#996600><b>Out</b></font> directive identifies a function or procedure parameter as being a variable reference for outputting to only.
<br>&nbsp;<br>
It allows a routine to return data to a variable of caller in addition to the <b>Result</b> value available in functions.
<br>&nbsp;<br>
It is equivalent to <b>Var</b> except that the value should not be changed by the routine.
<br>&nbsp;<br>
Delphi does not seem to enforce this, nor does it seem to enforce the need to assign a value.
</td></tr>

<tr height="10"><td></td></tr>
<tr height="30" bgcolor="#DADAF0"><td class="h2"><b>Related commands</b></td></tr>
<tr bgcolor="#F9F9FF"><td>
<table cellpadding="0" cellspacing="0">

<tr valign="top">
<td><b><a href="const.htm">Const</a></b></td>
<td width="8"></td>
<td align="left">Starts the definition of fixed data values</td>
</tr>

<tr valign="top">
<td><b><a href="function.htm">Function</a></b></td>
<td width="8"></td>
<td align="left">Defines a subroutine that returns a value</td>
</tr>

<tr valign="top">
<td><b><a href="procedure.htm">Procedure</a></b></td>
<td width="8"></td>
<td align="left">Defines a subroutine that does not return a value</td>
</tr>

<tr valign="top">
<td><b><a href="var.htm">Var</a></b></td>
<td width="8"></td>
<td align="left">Starts the definition of a section of data variables</td>
</tr>

</table>
</td>
</tr>

</table>
</td>
<td width="8">&nbsp;</td>

<td width="690">
<table width="100%" border="0" cellpadding="6" cellspacing="0">
<tr height="30"><td class="h1" bgcolor="#BCF6BB"><a name="Ex1"></a><b>Example code : Demonstrate all three types of parameter handling</b></tr>
<tr bgcolor="#FAFAFA"><td><font face="Courier New" size="2">
<font color=#008000>// Full Unit code.<br>// -----------------------------------------------------------<br>// You must store this code in a unit called <b>Unit1</b> with a form<br>// called <b>Form1</b> that has an <b>OnCreate</b> event called <b>FormCreate</b>.<br></font>&nbsp;<br><font color=#808080><b>unit Unit1;<br>&nbsp;<br>interface<br>&nbsp;<br>uses<br></b>&nbsp;&nbsp;Forms, Dialogs;<br>&nbsp;<br><b>type<br></b>&nbsp;&nbsp;TForm1 = class(TForm)<br>&nbsp;&nbsp;&nbsp;&nbsp;procedure FormCreate(Sender: TObject);<br>&nbsp;&nbsp;&nbsp;&nbsp;procedure ThreeParms(    value1 : Integer;
                     out value2 : Integer;
                     var value3 : Integer);
<br>&nbsp;&nbsp;<b>end;<br>&nbsp;<br>var<br>&nbsp;&nbsp;</b>Form1: TForm1;<br>&nbsp;<br><b>implementation<br><font color=#008800>{$R *.dfm}  // Include form definitions</font><br>&nbsp;<br>procedure TForm1.FormCreate(Sender: TObject);</b></font><br><b> var</b><br>
&nbsp;&nbsp;number1, number2, number3 : Integer;<br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Put values in our numbers</b></font><br>
&nbsp;&nbsp;number1 := 3;<br>
&nbsp;&nbsp;number2 := 4;<br>
&nbsp;&nbsp;number3 := 5;<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Call the simple routine to see how they are handled</b></font><br>
&nbsp;&nbsp;ThreeParms(number1, number2, number3);<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Show their values now</b></font><br>
&nbsp;&nbsp;ShowMessageFmt('number1 = %d number2 = %d number3 = %d ',<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [number1, number2, number3]);<br><b>
end;</b><br><b>
</b><br><font color=#008000><b>// Simple routine illustrating 3 types of parameter handling</b></font><br><font color=#008000><b>// value1 : Input value only</b></font><br><font color=#008000><b>// value2 : Output value only</b></font><br><font color=#008000><b>// value3 : Input and output value</b></font><br><b>
procedure TForm1.ThreeParms(&nbsp;&nbsp;&nbsp;&nbsp;value1: Integer;</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#C00000><b>Out</b></font> value2: Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var value3: Integer);<br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Add value1 to value 3 as the value2 output</b></font><br>
&nbsp;&nbsp;value2 := value1 + value3;<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Multiply value1 by value3 to give value3 output</b></font><br>
&nbsp;&nbsp;value3 := value1 * value3;<br><b>
end;</b><br><font color=#808080>&nbsp;<br><b>end.</b></font>
</font></td></tr>
<tr bgcolor="#D2ECCF">
 
<td align="right"><a href="out.htm#Ex1"><font face="Arial,Helvetica,Sans-Serif" size="1">Hide full unit code</font></a></td>

</tr>
<tr bgcolor="#D2ECCF"><td><font face="Courier New" size="2">
&nbsp;&nbsp;&nbsp;value1 = 3 value2 = 8 value3 = 15<br>
&nbsp;
</font></td></tr>

</table>
</td>

</tr>
<tr height="10"><td>&nbsp;</td></tr>
</table>

</html>
