hljs.registerLanguage("delphi",function(e){var r="Abs and array as Assert Assigned break begin case class ConditionalDefined const constructor continue DebugBreak Dec Declared Defined destructor div do downto else end except Exclude exit false finalization finally for function High if implementation implies in Inc Include inherited initialization integer interface is lambda Length Low mod new nil not object of operator or Ord overload Pred procedure property raise record reintroduce repeat resourcestring sar shl shr SizeOf Succ Swap TObject TForm TForm1 then true try type unit until uses var WriteLn while with xor",t=[e.CLCM,e.C(/\{/,/\}/,{r:0}),e.C(/\(\*/,/\*\)/,{r:10})],i={cN:"string",b:/'/,e:/'/,c:[{b:/''/}]},c={cN:"string",b:/(#\d+)+/},o={b:e.IR+"\\s*=\\s*class\\s*\\(",rB:!0,c:[e.TM]},n={cN:"function",bK:"function constructor destructor procedure",e:/[:;]/,k:"function constructor|10 destructor|10 procedure|10",c:[e.TM,{cN:"params",b:/\(/,e:/\)/,k:r,c:[i,c]}].concat(t)};return{cI:!0,k:r,i:/"|\$[G-Zg-z]|\/\*|<\/|\|/,c:[i,c,e.NM,o,n].concat(t)}});