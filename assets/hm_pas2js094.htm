<!DOCTYPE html>
<html>
<head>
<title></title>
<meta name=viewport content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />   
<link type="text/css" href="css/styles.css" rel="stylesheet" />
<link type="text/css" href="css/custom.css" rel="stylesheet" />
<link rel="stylesheet" title="Default" href="css/default.css"> 
<script type="text/javascript" src="js/jquery.js"></script>
<script src="js/highlight.min.js"></script>
<script src="js/delphi.min.js"></script>
<script src="js/javascript.min.js"></script>   
<script type="text/javascript">
hljs.tabReplace='    ';hljs.initHighlightingOnLoad();function showme(id){var divid=document.getElementById(id);if(divid.style.display=='block')divid.style.display='none';else divid.style.display='block';}
$(document).ready(function(){$("button").click(function(){$(this).text($(this).text()=='Show JS code'?'Hide JS code':'Show JS code');showme('widget');});});
</script>   
<style> 
html, body { margin:0; padding:0; background: #ffffff;} 
#idheader {width:100%; height:auto; padding: 0; margin: 0;position: fixed;top: 0;
z-index: 2;} 
#idheader table { background: #2C5D88; min-height: 59px }             
#idheader h1 { color: #FFF }     
#idnav {text-align: right; width: 158px; vertical-align: middle;} 
#idnav a { text-decoration: none }
#idnav span {display: inline-block;width: 24px;height: 24px;margin-left: 4px;
background:url('css/img/hm_webhelp_buttons_grey.png') top left no-repeat;} 
#idnav a span {background-image:url('css/img/hm_webhelp_buttons_white.png');} 
#idnav a span:hover {background-image:url('css/img/hm_webhelp_buttons_orange.png');} 
#idnav span.hmbtnprev { background-position: 0 -32px }
#idnav span.hmbtnnext { background-position: -24px -32px }
#idnav span.hmbtntop  { background-position: -48px -32px }
.language-css {background-color: #cd6a51;content: attr(rel);color: white;position: absolute;
width: 100%;background: #e18728;font-family: 'PT Serif', serif;padding: 5px 0;text-indent: 15px;font-size: 17px;font-weight: 300;line-height: 1.45;font-weight: 700;}
#checkoutbutton {
    background-color: #2C5D88;
  -moz-border-radius: 15px;
  -webkit-border-radius: 15px;
  color: #FFFFFF;
  border: 5px solid #e18728;
  padding: 2px;
  margin: 0px 0px 0px 25px;
}
#checkoutbutton:hover {opacity: 0.6; }
</style>
</head>
<body>
<div id="idheader">
<div id="idheaderbg">
<table style="width:100%;border:none;margin:0px;" cellspacing="0" cellpadding="0"> 
  <tr>
    <td class="topichead" style="text-align:left;">
      <h1 class="p_Heading1" style="page-break-after: avoid;"><span class="f_Heading1">ClassType</span></h1>
    </td>
    <td class="topichead" id="idnav">
      <a href="hm_pas2js015.htm"><span class="hmbtnprev"></span></a>
      <a href="index.htm" title="Parent Chapter"><span class="hmbtntop"></span></a>
      <a href="hm_pas2js017.htm"><span class="hmbtnnext"></span></a>
     </td>  
  </tr>  
</table>
</div>
</div>  

<br/><br/>
<table style="width:100%;border:none;margin:10px;" cellspacing="0" cellpadding="0">
  <tr>
	<td>
	ClassType
	</td>
  </tr>
</table>
	
<pre><span id="code" class="language-css">Smart pascal source code</span><br>
<code class="delphi" style="background-color: #FFFEEB;">
type
  TMyClass = class
    procedure WriteLnMyName; virtual;
  end;
type
  TChild = class(TMyClass)
    procedure WriteLnMyName; override;
  end;

procedure TMyClass.WriteLnMyName;
begin
  Writeln('Ancestor: ' + ClassName);
end;

procedure TChild.WriteLnMyName;
begin
  Writeln('I''m ' + ClassName);
end;

{ main.pas }

var
   o: TObject;
   c: TClass;
  mc: TMyClass;
  cc: TClass;

Begin

  o := TObject.ClassType.Create;
  c := o.ClassType;
  Writeln(TObject.ClassName);
  Writeln(o.ClassName);
  Writeln(c.ClassName);
  o := c.Create;
  Writeln(o.ClassName);

  mc := TMyClass.Create;
  cc := mc.ClassType;
  mc.WriteLnMyName;
  Writeln(TMyClass.ClassType.ClassName);
  Writeln(cc.ClassName);

  mc := TChild.Create;
  cc := mc.ClassType;
  mc.WriteLnMyName;
  Writeln(TChild.ClassType.ClassName);
  Writeln(cc.ClassName);


{ <<< CONSOLE OUTPUTS >>>
  TObject
  TObject
  TObject
  TObject
  Ancestor: TMyClass
  TMyClass
  TMyClass
  I'm TChild
  TChild
  TChild
}
</code></pre>
<button type="button" id="checkoutbutton">Show JS code</button>
<div id="widget" style="display:none;">
<pre>
<code class="javascript">
var Exception={
	$ClassName: "Exception",
	$Parent: TObject,
	$Init: function () { FMessage="" },
	Create: function (s,Msg) { s.FMessage=Msg; return s }
}
function $ToClassType(o) {
	if (o===null) return o;
	return o.ClassType
}
;
function $NewDyn(c,z) {
	if (c==null) throw Exception.Create($New(Exception),"ClassType is nil"+z);
	var i={ClassType:c};
	c.$Init(i);
	return i
}

      var o = null;
      var c = null;
      var mc = null;
      var cc = null;
      o = TObject.Create($NewDyn(TObject.ClassType(TObject),""));
      c = TObject.ClassType(o.ClassType);
      WriteLn(ClassName$1(TObject));
      WriteLn(ClassName$1($ToClassType(o)));
      WriteLn(ClassName$1(c));
      o = TObject.Create($NewDyn(c,""));
      WriteLn(ClassName$1($ToClassType(o)));
      mc = TObject.Create($New(TMyClass$1));
      cc = TObject.ClassType(mc.ClassType);
      TMyClass$1.WriteLnMyName$(mc);
      WriteLn(ClassName$1(TObject.ClassType(TMyClass$1)));
      WriteLn(ClassName$1(cc));
      mc = TObject.Create($New(TChild));
      cc = TObject.ClassType(mc.ClassType);
      TMyClass$1.WriteLnMyName$(mc);
      WriteLn(ClassName$1(TObject.ClassType(TChild)));
      WriteLn(ClassName$1(cc));
	  
/// TMyClass = class (TObject)
///  [line: 72, column: 3, file: uMain]
var TMyClass$1 = {
   $ClassName:"TMyClass",$Parent:TObject
   ,$Init:function ($) {
      TObject.$Init($);
   }
   /// procedure TMyClass.WriteLnMyName()
   ///  [line: 80, column: 20, file: uMain]
   ,WriteLnMyName:function(Self) {
      WriteLn(("Ancestor: "+TObject.ClassName(Self.ClassType)));
   }
   ,Destroy:TObject.Destroy
   ,WriteLnMyName$:function($){return $.ClassType.WriteLnMyName($)}
};
/// TChild = class (TMyClass)
///  [line: 76, column: 3, file: uMain]
var TChild = {
   $ClassName:"TChild",$Parent:TMyClass$1
   ,$Init:function ($) {
      TMyClass$1.$Init($);
   }
   /// procedure TChild.WriteLnMyName()
   ///  [line: 85, column: 18, file: uMain]
   ,WriteLnMyName:function(Self) {
      WriteLn(("I'm "+TObject.ClassName(Self.ClassType)));
   }
   ,Destroy:TObject.Destroy
   ,WriteLnMyName$:function($){return $.ClassType.WriteLnMyName($)}
};	  
</code></pre></div>
</div>
</body>
</html>
