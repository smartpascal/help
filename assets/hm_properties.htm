<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html oncontextmenu="return false">
<head>
   <title>Properties</title>
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="styles.css" rel="stylesheet" />

<script type="text/javascript" src="js/toc.js"></script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; filter:progid:DXImageTransform.Microsoft.DropShadow(color='b0b0b0', Direction=135, OffX='3', OffY='3') progid:DXImageTransform.Microsoft.Fade(Overlap=1.00);"></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#C0C0C0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">Properties</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="index.htm">Top</a>&nbsp;
     <a href="hm_fields.htm">Previous</a>&nbsp;
     <a href="hm_methods.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p style="text-align: justify; margin: 7px 0px 7px 0px;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">A </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">property</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">, like a field, defines an attribute of an object. But while a field is merely a storage location whose contents can be examined and changed, a property associates specific actions with reading or modifying its data. Properties provide control over access to an object's attributes, and they allow attributes to be computed.</span></p>
<p style="text-align: justify; margin: 7px 0px 7px 0px;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">Properties allow to encapsulate with a field-like syntax what can actually be methods (getter/setter). </span></p>
<p style="text-align: justify; margin: 7px 0px 7px 0px;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">The declaration of a property specifies a name and a type, and includes at least one access specifier. The syntax of a property declaration is:</span></p>
<div style="text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 7px 0px 7px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p> <span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;"> </span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Name</span><span class="f_CodeExample" style="color: #000000;">[args : </span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Type</span><span class="f_CodeExample" style="color: #000000;">] : </span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Type</span><span class="f_CodeExample" style="color: #000000;"> </span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;"> Getter </span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;"> Setter; </span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">default</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span></p>
<div style="text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 7px 0px 7px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="24"><span style="font-size: 16px; font-family: 'Symbol'; font-style: normal; color: #000000; text-decoration: none;">&#183;</span></td><td><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">a property can optionally have arguments/indexes, such properties can optionally be marked as default </span></td></tr></table></div><div style="text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 7px 0px 7px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="24"><span style="font-size: 16px; font-family: 'Symbol'; font-style: normal; color: #000000; text-decoration: none;">&#183;</span></td><td><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">the Getter can be a method returning, a field, another property, or an expression (enclosed between brackets) </span></td></tr></table></div><div style="text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 7px 0px 7px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="24"><span style="font-size: 16px; font-family: 'Symbol'; font-style: normal; color: #000000; text-decoration: none;">&#183;</span></td><td><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">the Setter can be a method, a field, another property or an expression (enclosed between brackets, with Value being the pseudo-variable that receives the value assigned to the property) </span></td></tr></table></div><p style="text-align: justify; margin: 7px 0px 7px 0px;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">The following form property Name : Type; declares a property backed by a hidden (inaccessible) field. The field can optionally be initialized. </span></p>
<p style="text-align: justify; margin: 7px 0px 7px 0px;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">The following form property Name; can be used to promote the visibility of a property without altering it in any other way, for instance to make public a property that was previously protected. </span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">Properties can also be prefixed by 'class' in which case they will be restricted to class variables, class methods and class properties, but can then be used on the class type (metaclass) and not just on instance. </span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">Property Access</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">Every property has a read specifier, a write specifier, or both. </span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">For example, given the declaration:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Color:&nbsp;TColor&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetColor&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetColor;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">the </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">GetColor</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> method must be declared as:</span></p>
<p style="text-align: justify;">&nbsp;</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">function</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetColor:&nbsp;TColor;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">and the </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">SetColor</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> method must be declared as one of these:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">procedure</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetColor(Value:&nbsp;TColor);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">procedure</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetColor(</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">const</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Value:&nbsp;TColor);</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">(The name of </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">SetColor's</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> parameter, of course, doesn't have to be Value.)</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">When a property is referenced in an expression, its value is read using the field or method listed in the </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">read</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> specifier. When a property is referenced in an assignment statement, its value is written using the field or method listed in the </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">write</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> specifier.</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">The example below declares a class called </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">TCompass</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> with a published property called </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">Heading</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">. The value of </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">Heading</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> is read through the </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">FHeading</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> field and written through the </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">SetHeading</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> procedure:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">type</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;THeading&nbsp;=&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">0</span><span class="f_CodeExample" style="color: #000000;">..</span><span class="f_CodeExample" style="color: #0000ff;">359</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;TCompass&nbsp;=&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">class</span><span class="f_CodeExample" style="color: #000000;">(TControl)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">private</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FHeading:&nbsp;THeading;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">procedure</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetHeading(Value:&nbsp;THeading);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">published</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Heading:&nbsp;THeading&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FHeading&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetHeading;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">end</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">Given this declaration, the statements:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">if</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Compass.Heading&nbsp;=&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">180</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">then</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GoingSouth;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;Compass.Heading&nbsp;:=&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">135</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">correspond to:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">if</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Compass.FHeading&nbsp;=&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">180</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">then</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GoingSouth;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;Compass.SetHeading(</span><span class="f_CodeExample" style="color: #0000ff;">135</span><span class="f_CodeExample" style="color: #000000;">);</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">In the </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">TCompass</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> class, no action is associated with reading the Heading property; the </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">read</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> operation consists of retrieving the value stored in the FHeading field. On the other hand, assigning a value to the Heading property translates into a call to the SetHeading method, which, presumably, stores the new value in the FHeading field as well as performing other actions. For example, SetHeading might be implemented like this:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">procedure</span><span class="f_CodeExample" style="color: #000000;">&nbsp;TCompass.SetHeading(Value:&nbsp;THeading);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">begin</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">if</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FHeading&nbsp;&lt;&gt;&nbsp;Value&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">then</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">begin</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FHeading&nbsp;:=&nbsp;Value;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Repaint;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-style: italic; color: #008000;">//&nbsp;update&nbsp;user&nbsp;interface&nbsp;to&nbsp;reflect&nbsp;new&nbsp;value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">end</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">end</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">A property whose declaration includes only a </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">read</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> specifier is a read-only property, and one whose declaration includes only a </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">write</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> specifier is a write-only property. It is an error to assign a value to a read-only property or use a write-only property in an expression.</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">Array Properties</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">Array properties are indexed properties. They can represent things like items in a list, child controls of a control, and pixels of a bitmap.</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">The declaration of an array property includes a parameter list that specifies the names and types of the indexes. For example:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Objects[</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Index</span><span class="f_CodeExample" style="color: #000000;">:&nbsp;Integer]:&nbsp;TObject&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetObject&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetObject;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Pixels[X,&nbsp;Y:&nbsp;Integer]:&nbsp;TColor&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetPixel&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetPixel;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Values[</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">const</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Name</span><span class="f_CodeExample" style="color: #000000;">:&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">string</span><span class="f_CodeExample" style="color: #000000;">]:&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">string</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetValue&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetValue;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">The format of an index parameter list is the same as that of a procedure's or function's parameter list, except that the parameter declarations are enclosed in brackets instead of parentheses. Unlike arrays, which can use only ordinal-type indexes, array properties allow indexes of any type.</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">For array properties, access specifiers must list methods rather than fields. The method in a </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">read</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> specifier must be a function that takes the number and type of parameters listed in the property's index parameter list, in the same order, and whose result type is identical to the property's type. The method in a </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">write</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> specifier must be a procedure that takes the number and type of parameters listed in the property's index parameter list, in the same order, plus an additional value or </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">const</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> parameter of the same type as the property.</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">For example, the access methods for the array properties above might be declared as:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">function</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetObject(</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Index</span><span class="f_CodeExample" style="color: #000000;">:&nbsp;Integer):&nbsp;TObject;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">function</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetPixel(X,&nbsp;Y:&nbsp;Integer):&nbsp;TColor;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">function</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetValue(</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">const</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Name</span><span class="f_CodeExample" style="color: #000000;">:&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">string</span><span class="f_CodeExample" style="color: #000000;">):&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">string</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">procedure</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetObject(</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Index</span><span class="f_CodeExample" style="color: #000000;">:&nbsp;Integer;&nbsp;Value:&nbsp;TObject);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">procedure</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetPixel(X,&nbsp;Y:&nbsp;Integer;&nbsp;Value:&nbsp;TColor);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">procedure</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetValue(</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">const</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Name</span><span class="f_CodeExample" style="color: #000000;">,&nbsp;Value:&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">string</span><span class="f_CodeExample" style="color: #000000;">);</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">An array property is accessed by indexing the property identifier. For example, the statements:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">if</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Collection.Objects[</span><span class="f_CodeExample" style="color: #0000ff;">0</span><span class="f_CodeExample" style="color: #000000;">]&nbsp;=&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">nil</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">then</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Exit</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;Canvas.Pixels[</span><span class="f_CodeExample" style="color: #0000ff;">10</span><span class="f_CodeExample" style="color: #000000;">,&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">20</span><span class="f_CodeExample" style="color: #000000;">]&nbsp;:=&nbsp;clRed;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;Params.Values[</span><span class="f_CodeExample" style="color: #0000ff;">'PATH'</span><span class="f_CodeExample" style="color: #000000;">]&nbsp;:=&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">'C:\BIN'</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">correspond&nbsp;to:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">if</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Collection.GetObject(</span><span class="f_CodeExample" style="color: #0000ff;">0</span><span class="f_CodeExample" style="color: #000000;">)&nbsp;=&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">nil</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">then</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Exit</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;Canvas.SetPixel(</span><span class="f_CodeExample" style="color: #0000ff;">10</span><span class="f_CodeExample" style="color: #000000;">,&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">20</span><span class="f_CodeExample" style="color: #000000;">,&nbsp;clRed);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;Params.SetValue(</span><span class="f_CodeExample" style="color: #0000ff;">'PATH'</span><span class="f_CodeExample" style="color: #000000;">,&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">'C:\BIN'</span><span class="f_CodeExample" style="color: #000000;">);</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">The definition of an array property can be followed by the </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">default</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> directive, in which case the array property becomes the default property of the class. For example:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">type</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;TStringArray&nbsp;=&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">class</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">public</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Strings[</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Index</span><span class="f_CodeExample" style="color: #000000;">:&nbsp;Integer]:&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">string</span><span class="f_CodeExample" style="color: #000000;">&nbsp;...;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">default</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">end</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">If a class has a default property, you can access that property with the abbreviation </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">object[index],</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> which is equivalent to object.property[index]. For example, given the declaration above, StringArray.Strings[7] can be abbreviated to StringArray[7]. A class can have only one default property with a given signature (array parameter list), but it is possible to overload the default property. Changing or hiding the default property in descendent classes may lead to unexpected behavior, since the compiler always binds to properties statically.</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">Index Specifiers</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">Index specifiers allow several properties to share the same access method while representing different values. An index specifier consists of the directive </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">index</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> followed by an integer constant between -2147483647 and 2147483647. If a property has an index specifier, its </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">read</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> and </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">write</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> specifiers must list methods rather than fields. For example:</span></p>
<p style="text-align: justify;">&nbsp;</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">type</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;TRectangle&nbsp;=&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">class</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">private</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FCoordinates:&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">array</span><span class="f_CodeExample" style="color: #000000;">[</span><span class="f_CodeExample" style="color: #0000ff;">0</span><span class="f_CodeExample" style="color: #000000;">..</span><span class="f_CodeExample" style="color: #0000ff;">3</span><span class="f_CodeExample" style="color: #000000;">]&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">of</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Longint;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">function</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetCoordinate(</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Index</span><span class="f_CodeExample" style="color: #000000;">:&nbsp;Integer):&nbsp;Longint;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">procedure</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetCoordinate(</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Index</span><span class="f_CodeExample" style="color: #000000;">:&nbsp;Integer;&nbsp;Value:&nbsp;Longint);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">public</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Left:&nbsp;Longint&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">index</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">0</span><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetCoordinate&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetCoordinate;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Top:&nbsp;Longint&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">index</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">1</span><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetCoordinate&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetCoordinate;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Right:&nbsp;Longint&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">index</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">2</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetCoordinate</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetCoordinate;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Bottom:&nbsp;Longint&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">index</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">3</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetCoordinate</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetCoordinate;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Coordinates[</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Index</span><span class="f_CodeExample" style="color: #000000;">:&nbsp;Integer]:&nbsp;Longint&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetCoordinate</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetCoordinate;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">end</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">An access method for a property with an index specifier must take an extra value parameter of type Integer. For a </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">read</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> function, it must be the last parameter; for a </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">write</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> procedure, it must be the second-to-last parameter (preceding the parameter that specifies the property value). When a program accesses the property, the property's integer constant is automatically passed to the access method.</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">Given the declaration above, if Rectangle is of type TRectangle, then:</span></p>
<p style="text-align: justify;">&nbsp;</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;Rectangle.Right&nbsp;:=&nbsp;Rectangle.Left&nbsp;+&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">100</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">corresponds&nbsp;to:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;Rectangle.SetCoordinate(</span><span class="f_CodeExample" style="color: #0000ff;">2</span><span class="f_CodeExample" style="color: #000000;">,&nbsp;Rectangle.GetCoordinate(</span><span class="f_CodeExample" style="color: #0000ff;">0</span><span class="f_CodeExample" style="color: #000000;">)&nbsp;+&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">100</span><span class="f_CodeExample" style="color: #000000;">);</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">Storage Specifiers</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">The optional </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">stored</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">, </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">default</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">, and </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">nodefault</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> directives are called storage specifiers. They have no effect on program behavior, but control whether or not to save the values of published properties in form files.</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">The </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">stored</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> directive must be followed by </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">True</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">, </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">False</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">, the name of a </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">Boolean</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> field, or the name of a parameterless method that returns a Boolean value. For example:</span></p>
<p style="text-align: justify;">&nbsp;</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">Name</span><span class="f_CodeExample" style="color: #000000;">:&nbsp;TComponentName&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FName&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetName&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">stored</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">False</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">If a property has no </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">stored</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> directive, it is treated as if stored </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">True</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> were specified.</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">The default directive must be followed by a constant of the same type as the property. For example:</span></p>
<p style="text-align: justify;">&nbsp;</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Tag:&nbsp;Longint&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FTag&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FTag&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">default</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">0</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">To override an inherited </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">default</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> value without specifying a new one, use the </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">nodefault</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> directive. The default and nodefault directives are supported only for ordinal types and for set types, provided the upper and lower bounds of the set's base type have ordinal values between 0 and 31; if such a property is declared without default or nodefault, it is treated as if nodefault were specified. For reals, pointers, and strings, there is an implicit default value of 0, nil, and '' (the empty string), respectively.</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">Note</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">: You can't use the ordinal value 2147483648 has a default value. This value is used internally to represent nodefault.</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">When saving a component's state, the storage specifiers of the component's published properties are checked. If a property's current value is different from its default value (or if there is no default value) and the stored specifier is True, then the property's value is saved. Otherwise, the property's value is not saved.</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">Note</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">: Property values are not automatically initialized to the default value. That is, the default directive controls only when property values are saved to the form file, but not the initial value of the property on a newly created instance.</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">Storage specifiers are not supported for array properties. The </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">default</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> directive has a different meaning when used in an array property declaration. See Array Properties, above.</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">Property Overrides and Redeclarations</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">A property declaration that doesn't specify a type is called a property override. Property overrides allow you to change a property's inherited visibility or specifiers. The simplest override consists only of the reserved word property followed by an inherited property identifier; this form is used to change a property's visibility. For example, if an ancestor class declares a property as protected, a derived class can redeclare it in a public or published section of the class. Property overrides can include </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">read, write,stored, default, and nodefault</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> directives; any such directive overrides the corresponding inherited directive. An override can replace an inherited access specifier, add a missing specifier, or increase a property's visibility, but it cannot remove an access specifier or decrease a property's visibility. An override can include an </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">implements</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> directive, which adds to the list of implemented interfaces without removing inherited ones.</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">The following declarations illustrate the use of property overrides:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">type</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;TAncestor&nbsp;=&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">class</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">protected</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Size:&nbsp;Integer&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FSize;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Text:&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">string</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;GetText&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetText;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Color:&nbsp;TColor&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FColor&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetColor&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">stored</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">False</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">end</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">type</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;TDerived&nbsp;=&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">class</span><span class="f_CodeExample" style="color: #000000;">(TAncestor)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">protected</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Size&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;SetSize;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">published</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Text;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Color&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">stored</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">True</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">default</span><span class="f_CodeExample" style="color: #000000;">&nbsp;clBlue;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">end</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">The override of Size adds a </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">write</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> specifier to allow the property to be modified. The overrides of Text and Color change the visibility of the properties from protected to published. The property override of Color also specifies that the property should be filed if its value isn't clBlue.</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">A redeclaration of a property that includes a type identifier hides the inherited property rather than overriding it. This means that a new property is created with the same name as the inherited one. Any property declaration that specifies a type must be a complete declaration, and must therefore include at least one access specifier.</span></p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">Whether a property is hidden or overridden in a derived class, property look-up is always static. That is, the declared (compile-time) type of the variable used to identify an object determines the interpretation of its property identifiers. Hence, after the following code executes, reading or assigning a value to MyObject.Value invokes Method1 or Method2, even though MyObject holds an instance of TDescendant. But you can cast MyObject to TDescendant to access the descendent class's properties and their access specifiers:</span></p>
<p style="text-align: justify;">&nbsp;</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">type</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TAncestor&nbsp;=&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">class</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Value:&nbsp;Integer&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Method1&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Method2;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">end</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TDescendant&nbsp;=&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">class</span><span class="f_CodeExample" style="color: #000000;">(TAncestor)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Value:&nbsp;Integer&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Method3&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Method4;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">end</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">var</span><span class="f_CodeExample" style="color: #000000;">&nbsp;MyObject:&nbsp;TAncestor;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyObject&nbsp;:=&nbsp;TDescendant.Create;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">Class Properties</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">Class properties can be accessed without an object reference. Class property accessors must themselves be declared as class static methods, or class fields. A class property is declared with the class property keywords. Class properties cannot be published, and cannot have stored or default value definitions.</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">You can introduce a block of class static fields within a class declaration by using the class var block declaration. All fields declared after class var have static storage attributes. A class var block is terminated by the following:</span></p>
<div style="text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 16px; font-family: 'Symbol'; font-style: normal; color: #000000; text-decoration: none;">&#183;</span></td><td><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">Another </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">class var</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> declaration</span></td></tr></table></div><div style="text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 16px; font-family: 'Symbol'; font-style: normal; color: #000000; text-decoration: none;">&#183;</span></td><td><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">A </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">procedure or function (i.e. method) declaration</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;"> (including class procedures and class functions)</span></td></tr></table></div><div style="text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 16px; font-family: 'Symbol'; font-style: normal; color: #000000; text-decoration: none;">&#183;</span></td><td><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">A property declaration (including class properties)</span></td></tr></table></div><div style="text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 16px; font-family: 'Symbol'; font-style: normal; color: #000000; text-decoration: none;">&#183;</span></td><td><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">A </span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">constructor or destructor declaration</span></td></tr></table></div><div style="text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 16px; font-family: 'Symbol'; font-style: normal; color: #000000; text-decoration: none;">&#183;</span></td><td><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">A visibility scope specifier (</span><span style="font-size: 16px; font-family: 'Times New Roman'; font-weight: bold; color: #000000;">public, private, protected, published, strict private, and strict protected</span><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">)</span></td></tr></table></div><p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">For example:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">type</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;TMyClass&nbsp;=&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">class</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strict&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">private</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">class</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">var</span><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-style: italic; color: #008000;">//&nbsp;Note&nbsp;fields&nbsp;must&nbsp;be&nbsp;declared&nbsp;as&nbsp;class&nbsp;fields</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FRed:&nbsp;Integer;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FGreen:&nbsp;Integer;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FBlue:&nbsp;Integer;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">public</span><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-style: italic; color: #008000;">//&nbsp;ends&nbsp;the&nbsp;class&nbsp;var&nbsp;block</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">class</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Red:&nbsp;Integer&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FRed&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FRed;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">class</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Green:&nbsp;Integer&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FGreen&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FGreen;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">class</span><span class="f_CodeExample" style="color: #000000;">&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">property</span><span class="f_CodeExample" style="color: #000000;">&nbsp;Blue:&nbsp;Integer&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">read</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FBlue&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">write</span><span class="f_CodeExample" style="color: #000000;">&nbsp;FBlue;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold; color: #000080;">end</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="font-size: 16px; font-family: 'Times New Roman'; color: #000000;">You&nbsp;can&nbsp;access&nbsp;the&nbsp;above&nbsp;class&nbsp;properties&nbsp;with&nbsp;the&nbsp;code:</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table cellspacing="0" cellpadding="0" border="1" style="border: solid 1px #000000; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" style="border: none"><p><span class="f_CodeExample" style="color: #000000;"> TMyClass.Red := </span><span class="f_CodeExample" style="color: #0000ff;">0</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;TMyClass.Blue&nbsp;:=&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">0</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="color: #000000;">&nbsp;TMyClass.Green&nbsp;:=&nbsp;</span><span class="f_CodeExample" style="color: #0000ff;">0</span><span class="f_CodeExample" style="color: #000000;">;</span></p>
</td>
</tr>
</table>
</div>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;">&nbsp;</p>

</td></tr></table>

</body>
</html>
