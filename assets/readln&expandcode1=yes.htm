<!-- (0065)ReadLn&ExpandCode1=Yes -->
<html oncontextmenu="return false">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Smart Pascal : ReadLn command</title>
<meta name="Description" content="">
<meta name="Keywords" content="Delphi, Delphi Programming, Basics, Keyword, Command, ReadLn, RTL ">

<link rel="stylesheet" type="text/css" href="css/delphi.css" />

</head>
<body bgcolor="#FFFFFF">
<table width="984" cellpadding="0" cellspacing="0" border="0" align="center">
<tr>
<td>
<table width="100%" cellpadding="5" cellspacing="0" border="0" align="center"><tr>
<td>
<b><a href="index.htm"><font color="#A00000" size="6">Smart</font></a><font color="#000000" size="2"><a href="index.htm">Pascal</a></font></b>
</tr>

<tr height="50" valign="top" bgcolor="#DDDDDD">

<td><font color="#0000A0" face="Courier New" size="5"><b>ReadLn</b><br><font face="Arial,Helvetica,Sans-Serif" size="1">Procedure</font></font></td>

<td align="center"><font color="#444444" face="Courier New" size="4">Read a complete line of data from a text file</font></td>

<td align="right"><font color="#000000" face="Arial,Helvetica,Sans-Serif" size="3"><b>System</b> unit</font></td>

</tr>
</table>
</td>
</tr>
<tr>
<td>
<table width="100%" border="0" cellpadding="5" cellspacing="0" align="center" bgcolor="#F8F8F8">
<tr valign="top">

<td width="15" align="right"><font face="Courier New" size="2" color="#FF0000"><b>1</b></font></td>

<td><font face="Courier New" size="2">&nbsp;procedure&nbsp;<font color="#0000A0"><b>ReadLn</b></font>

(
var Variable1 {,var Variable2...}
)
;</font></td>

</tr>

<tr valign="top">
<td width="15" align="right"><font face="Courier New" size="2" color="#FF0000"><b>2</b></font></td>

<td><font face="Courier New" size="2">&nbsp;procedure&nbsp;<font color="#0000A0"><b>ReadLn</b></font>&nbsp;(
<b>var FileHandle </b> : TextFile; var Variable1 {,var Variable2...}
) ;</font></td>

</tr>

</table>
</td>
</tr>
<tr height="10"><td></td></tr>
</table>
<table width="984" border="0" cellspacing="0" cellpadding="0" align="center">
<tr valign="top">
<td width="380">
<table border="0" cellpadding="7" cellspacing="0">
<tr height="30"><td class="title" bgcolor="#FEF5B5"><b>Description</b></td></tr>
<tr bgcolor="#FFFEEB"><td>
The <font color=#996600><b>ReadLn</b></font> procedure reads a complete line of data from a text file or to the console.
<br>&nbsp;<br>
<font color=#FF0000><b>Version 1</b></font>
<br>&nbsp;<br>
Is used to read from the console.
<br>&nbsp;<br>
<font color=#FF0000><b>Version 2</b></font>
<br>&nbsp;<br>
Is used to read a line of text from a text file with the given <b>FileHandle</b>.
<br>&nbsp;<br>
You must use <b>AssignFile</b> to assign a file to the <b>FileHandle</b> and open the file with <b>Reset</b> before using <font color=#996600><b>ReadLn</b></font>.
<br>&nbsp;<br>
The current file text line is parsed into the given variable values. 
<br>&nbsp;<br>
After parsing, any remaining text in the current file line is ignored, and the file positioned to the next line (or <b>Eof</b> set true if none left).
</td></tr>

<tr height="10"><td></td></tr>
<tr height="30"><td class="title" bgcolor="#FFD6D4"><b>Notes</b></td></tr>
<tr bgcolor="#FFF5F3"><td>
<font color=#996600><b>ReadLn</b></font> does not buffer records, so performance is degraded. <b>BlockRead</b> is more efficient, but is geared to writing to binary files.<br>
</td></tr>

<tr height="10"><td></td></tr>
<tr height="30" bgcolor="#DADAF0"><td class="h2"><b>Related commands</b></td></tr>
<tr bgcolor="#F9F9FF"><td>
<table cellpadding="0" cellspacing="0">

<tr valign="top">
<td><b><a href="assignfile.htm">AssignFile</a></b></td>
<td width="8"></td>
<td align="left">Assigns a file handle to a binary or text file</td>
</tr>

<tr valign="top">
<td><b><a href="blockread.htm">BlockRead</a></b></td>
<td width="8"></td>
<td align="left">Reads a block of data records from an untyped binary file</td>
</tr>

<tr valign="top">
<td><b><a href="blockwrite.htm">BlockWrite</a></b></td>
<td width="8"></td>
<td align="left">Writes a block of data records to an untyped binary file</td>
</tr>

<tr valign="top">
<td><b><a href="eof.htm">Eof</a></b></td>
<td width="8"></td>
<td align="left">Returns true if a file opened with <b>Reset</b> is at the end</td>
</tr>

<tr valign="top">
<td><b><a href="file.htm">File</a></b></td>
<td width="8"></td>
<td align="left">Defines a typed or untyped file</td>
</tr>

<tr valign="top">
<td><b><a href="read.htm">Read</a></b></td>
<td width="8"></td>
<td align="left">Read data from a binary or text file</td>
</tr>

<tr valign="top">
<td><b><a href="readln.htm">ReadLn</a></b></td>
<td width="8"></td>
<td align="left">Read a complete line of data from a text file</td>
</tr>

<tr valign="top">
<td><b><a href="reset.htm">Reset</a></b></td>
<td width="8"></td>
<td align="left">Open a text file for reading, or binary file for read/write</td>
</tr>

<tr valign="top">
<td><b><a href="textfile.htm">TextFile</a></b></td>
<td width="8"></td>
<td align="left">Declares a file type for storing lines of text</td>
</tr>

<tr valign="top">
<td><b><a href="write.htm">Write</a></b></td>
<td width="8"></td>
<td align="left">Write data to a binary or text file</td>
</tr>

<tr valign="top">
<td><b><a href="writeln.htm">WriteLn</a></b></td>
<td width="8"></td>
<td align="left">Write a complete line of data to a text file</td>
</tr>

</table>
</td>
</tr>

</table>
</td>
<td width="8">&nbsp;</td>

<td width="690">
<table width="100%" border="0" cellpadding="6" cellspacing="0">
<tr height="30"><td class="h1" bgcolor="#BCF6BB"><a name="Ex1"></a><b>Example code : Reading each text line as a set of 4 numbers</b></tr>
<tr bgcolor="#FAFAFA"><td><font face="Courier New" size="2">
<font color=#008000>// Full Unit code.<br>// -----------------------------------------------------------<br>// You must store this code in a unit called <b>Unit1</b> with a form<br>// called <b>Form1</b> that has an <b>OnCreate</b> event called <b>FormCreate</b>.<br></font>&nbsp;<br><font color=#808080><b>unit Unit1;<br>&nbsp;<br>interface<br>&nbsp;<br>uses<br></b>&nbsp;&nbsp;<font color=#008000>// The System unit does not need to be defined</font><br>&nbsp;&nbsp;SysUtils,<br>&nbsp;&nbsp;Forms, Dialogs;<br>&nbsp;<br><b>type<br></b>&nbsp;&nbsp;TForm1 = class(TForm)<br>&nbsp;&nbsp;&nbsp;&nbsp;procedure FormCreate(Sender: TObject);<br>&nbsp;&nbsp;<b>end;<br>&nbsp;<br>var<br>&nbsp;&nbsp;</b>Form1: TForm1;<br>&nbsp;<br><b>implementation<br><font color=#008800>{$R *.dfm}  // Include form definitions</font><br>&nbsp;<br>procedure TForm1.FormCreate(Sender: TObject);</b></font><br><b> var</b><br>
&nbsp;&nbsp;myFile : TextFile;<br>
&nbsp;&nbsp;n1, n2, n3 : Integer;<br><b>
</b><br><b>
begin</b><br>&nbsp;&nbsp;<font color=#008000><b>// Try to open the Test.txt file for writing to</b></font><br>
&nbsp;&nbsp;AssignFile(myFile, 'Test.txt');<br>
&nbsp;&nbsp;ReWrite(myFile);<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Write numbers in a string</b></font><br>&nbsp;&nbsp;WriteLn(myFile, '1 2 3 4');&nbsp;&nbsp; <font color=#008000><b>// Note that the 4 will be ignored</b></font><br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Write numbers as separate parameters</b></font><br>
&nbsp;&nbsp;WriteLn(myFile, 5, ' ', 6, ' ', 7);<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Write numbers as separate parameters</b></font><br>&nbsp;&nbsp;WriteLn(myFile, '8 9');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color=#008000><b>// Missing numbers will be seen as 0</b></font><br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Close the file</b></font><br>
&nbsp;&nbsp;CloseFile(myFile);<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Reopen the file for reading</b></font><br>
&nbsp;&nbsp;Reset(myFile);<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Display the file contents</b></font><br>
&nbsp;&nbsp;while not Eof(myFile) do<br>
&nbsp;&nbsp;begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color=#C00000><b>ReadLn</b></font>(myFile, n1, n2, n3);<br>
&nbsp;&nbsp;&nbsp;&nbsp;ShowMessage(IntToStr(n1)+' '+<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntToStr(n2)+' '+<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntToStr(n3));<br>
&nbsp;&nbsp;end;<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Close the file for the last time</b></font><br>
&nbsp;&nbsp;CloseFile(myFile);<br><b>
end;</b><br><font color=#808080>&nbsp;<br><b>end.</b></font>
</font></td></tr>
<tr bgcolor="#D2ECCF">
 
<td align="right"><a href="readln.htm#Ex1"><font face="Arial,Helvetica,Sans-Serif" size="1">Hide full unit code</font></a></td>

</tr>
<tr bgcolor="#D2ECCF"><td><font face="Courier New" size="2">
&nbsp;&nbsp;&nbsp;1 2 3<br>&nbsp;&nbsp;
5 6 7<br>&nbsp;&nbsp;
8 9 0<br>
&nbsp;
</font></td></tr>

</table>
</td>

</tr>
<tr height="10"><td>&nbsp;</td></tr>
</table>

</html>
