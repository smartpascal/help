<!-- (0049)Packed -->
<html oncontextmenu="return false">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Smart Pascal : Packed command</title>
<meta name="Description" content="">
<meta name="Keywords" content="Delphi, Delphi Programming, Basics, Keyword, Command, Packed, RTL ">

<link rel="stylesheet" type="text/css" href="css/delphi.css" />

</head>
<body bgcolor="#FFFFFF">
<table width="984" cellpadding="0" cellspacing="0" border="0" align="center">
<tr>
<td>
<table width="100%" cellpadding="5" cellspacing="0" border="0" align="center"><tr>
<td>
<b><a href="index.htm"><font color="#A00000" size="6">Smart</font></a><font color="#000000" size="2"><a href="index.htm">Pascal</a></font></b>
</tr>

<tr height="50" valign="top" bgcolor="#DDDDDD">

<td><font color="#0000A0" face="Courier New" size="5"><b>Packed</b><br><font face="Arial,Helvetica,Sans-Serif" size="1">Keyword</font></font></td>

<td align="center"><font color="#444444" face="Courier New" size="4">Compacts complex data types into minimal storage</font></td>

</tr>
</table>
</td>
</tr>
<tr>
<td>
<table width="100%" border="0" cellpadding="5" cellspacing="0" align="center" bgcolor="#F8F8F8">
<tr valign="top">

<td><font face="Courier New" size="2">&nbsp;
type <b>Name = Packed</b> array[...] of ...;<br>&nbsp;
type <b>Name = Packed</b> class&nbsp;&nbsp;... end;<br>&nbsp;
type <b>Name = Packed</b> object ... end;<br>&nbsp;
type <b>Name = Packed</b> record ... end;
</font></td>

</tr>

</table>
</td>
</tr>
<tr height="10"><td></td></tr>
</table>
<table width="984" border="0" cellspacing="0" cellpadding="0" align="center">
<tr valign="top">
<td width="380">
<table border="0" cellpadding="7" cellspacing="0">
<tr height="30"><td class="title" bgcolor="#FEF5B5"><b>Description</b></td></tr>
<tr bgcolor="#FFFEEB"><td>
The <font color=#996600><b>Packed</b></font> keyword tells Delphi to minimise the storage taken up by the defined object.
<br>&nbsp;<br>
Normally, complex data types, such as <b>records</b> have their elements aligned to 2, 4 or 8 byte boundaries, as appropriate to the data type. For example, a <b>Word</b> field would be aligned to a 4 byte boundary.
<br>&nbsp;<br>
Records are also padded to ensure that they end on a 4 byte boundary.
<br>&nbsp;<br>
These alignments ensure optimal access performance.
<br>&nbsp;<br>
The <font color=#996600><b>Packed</b></font> overrides this, compressing the data into the smallest storage, albeit with consequential reduced access performance.
</td></tr>

<tr height="10"><td></td></tr>
<tr height="30"><td class="title" bgcolor="#FFD6D4"><b>Notes</b></td></tr>
<tr bgcolor="#FFF5F3"><td>
Examples of unpacked alignments :<br>
<font class=mono><font color=#00A000><br>
Word&nbsp;&nbsp;&nbsp;&nbsp; = 2 bytes<br>
LongWord = 4 bytes<br>
Single&nbsp;&nbsp; = 4 bytes<br>
Double&nbsp;&nbsp; = 8 bytes<br>
</font></font><br>
</td></tr>

<tr height="10"><td></td></tr>
<tr height="30" bgcolor="#DADAF0"><td class="h2"><b>Related commands</b></td></tr>
<tr bgcolor="#F9F9FF"><td>
<table cellpadding="0" cellspacing="0">

<tr valign="top">
<td><b><a href="$align.htm">$Align</a></b></td>
<td width="8"></td>
<td align="left">Determines whether data is aligned or packed</td>
</tr>

<tr valign="top">
<td><b><a href="array.htm">Array</a></b></td>
<td width="8"></td>
<td align="left">A data type holding indexable collections of data</td>
</tr>

<tr valign="top">
<td><b><a href="class.htm">Class</a></b></td>
<td width="8"></td>
<td align="left">Starts the declaration of a type of object class</td>
</tr>

<tr valign="top">
<td><b><a href="object.htm">Object</a></b></td>
<td width="8"></td>
<td align="left">Allows a subroutine data type to refer to an object method</td>
</tr>

<tr valign="top">
<td><b><a href="record.htm">Record</a></b></td>
<td width="8"></td>
<td align="left">A structured data type - holding fields of data</td>
</tr>

</table>
</td>
</tr>

</table>
</td>
<td width="8">&nbsp;</td>

<td width="690">
<table width="100%" border="0" cellpadding="6" cellspacing="0">
<tr height="30"><td class="h1" bgcolor="#BCF6BB"><a name="Ex1"></a><b>Example code : Packing a record to reduce storage</b></tr>
<tr bgcolor="#FAFAFA"><td><font face="Courier New" size="2">
<b> type</b><br>&nbsp;&nbsp;<font color=#008000><b>// Declare an unpacked record</b></font><br>
&nbsp;&nbsp;TDefaultRecord = Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;name1&nbsp;&nbsp; : string[4];<br>
&nbsp;&nbsp;&nbsp;&nbsp;floater : single;<br>
&nbsp;&nbsp;&nbsp;&nbsp;name2&nbsp;&nbsp; : char;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp; : Integer;<br>
&nbsp;&nbsp;end;<br><b>
</b><br>&nbsp;&nbsp;<font color=#008000><b>// Declare a packed record</b></font><br>
&nbsp;&nbsp;TPackedRecord = <font color=#C00000><b>Packed</b></font> Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;name1&nbsp;&nbsp; : string[4];<br>
&nbsp;&nbsp;&nbsp;&nbsp;floater : single;<br>
&nbsp;&nbsp;&nbsp;&nbsp;name2&nbsp;&nbsp; : char;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp; : Integer;<br>
&nbsp;&nbsp;end;<br><b>
</b><br><b>
var</b><br>
&nbsp;&nbsp;defaultRec : TDefaultRecord;<br>
&nbsp;&nbsp;packedRec&nbsp;&nbsp;: TPackedRecord;<br><b>
</b><br><b>
begin</b><br>
&nbsp;&nbsp;ShowMessage('Default record size = '+IntToStr(SizeOf(defaultRec)));<br>
&nbsp;&nbsp;ShowMessage('Packed record size = '+IntToStr(SizeOf(packedRec)));<br><b>
end;</b><br>
</font></td></tr>
<tr bgcolor="#D2ECCF">
 
<td align="right"><a href="packed&expandcode1=yes.htm#Ex1"><font face="Arial,Helvetica,Sans-Serif" size="1">Show full unit code</font></a></td>

</tr>
<tr bgcolor="#D2ECCF"><td><font face="Courier New" size="2">
&nbsp;&nbsp;&nbsp;Default record size = 20<br>&nbsp;&nbsp;
Packed record size = 14<br>
&nbsp;
</font></td></tr>

</table>
</td>

</tr>
<tr height="10"><td>&nbsp;</td></tr>
</table>

</html>
