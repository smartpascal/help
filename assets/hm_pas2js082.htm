<!DOCTYPE html>
<html>
<head>
<title></title>
<meta name=viewport content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />   
<link type="text/css" href="css/styles.css" rel="stylesheet" />
<link type="text/css" href="css/custom.css" rel="stylesheet" />
<link rel="stylesheet" title="Default" href="css/default.css"> 
<script type="text/javascript" src="js/jquery.js"></script>
<script src="js/highlight.min.js"></script>
<script src="js/delphi.min.js"></script>
<script src="js/javascript.min.js"></script>   
<script type="text/javascript">
hljs.tabReplace='    ';hljs.initHighlightingOnLoad();function showme(id){var divid=document.getElementById(id);if(divid.style.display=='block')divid.style.display='none';else divid.style.display='block';}
$(document).ready(function(){$("button").click(function(){$(this).text($(this).text()=='Show JS code'?'Hide JS code':'Show JS code');showme('widget');});});
</script>   
<style> 
html, body { margin:0; padding:0; background: #ffffff;} 
#idheader {width:100%; height:auto; padding: 0; margin: 0;position: fixed;top: 0;
z-index: 2;} 
#idheader table { background: #2C5D88; min-height: 59px }             
#idheader h1 { color: #FFF }     
#idnav {text-align: right; width: 158px; vertical-align: middle;} 
#idnav a { text-decoration: none }
#idnav span {display: inline-block;width: 24px;height: 24px;margin-left: 4px;
background:url('css/img/hm_webhelp_buttons_grey.png') top left no-repeat;} 
#idnav a span {background-image:url('css/img/hm_webhelp_buttons_white.png');} 
#idnav a span:hover {background-image:url('css/img/hm_webhelp_buttons_orange.png');} 
#idnav span.hmbtnprev { background-position: 0 -32px }
#idnav span.hmbtnnext { background-position: -24px -32px }
#idnav span.hmbtntop  { background-position: -48px -32px }
.language-css {background-color: #cd6a51;content: attr(rel);color: white;position: absolute;
width: 100%;background: #e18728;font-family: 'PT Serif', serif;padding: 5px 0;text-indent: 15px;font-size: 17px;font-weight: 300;line-height: 1.45;font-weight: 700;}
#checkoutbutton {
    background-color: #2C5D88;
  -moz-border-radius: 15px;
  -webkit-border-radius: 15px;
  color: #FFFFFF;
  border: 5px solid #e18728;
  padding: 2px;
  margin: 0px 0px 0px 25px;
}
#checkoutbutton:hover {opacity: 0.6; }
</style>
</head>
<body>
<div id="idheader">
<div id="idheaderbg">
<table style="width:100%;border:none;margin:0px;" cellspacing="0" cellpadding="0"> 
  <tr>
    <td class="topichead" style="text-align:left;">
      <h1 class="p_Heading1" style="page-break-after: avoid;"><span class="f_Heading1">Class of | metaclass</span></h1>
    </td>
    <td class="topichead" id="idnav">
      <a href="hm_pas2js015.htm"><span class="hmbtnprev"></span></a>
      <a href="index.htm" title="Parent Chapter"><span class="hmbtntop"></span></a>
      <a href="hm_pas2js017.htm"><span class="hmbtnnext"></span></a>
     </td>  
  </tr>  
</table>
</div>
</div>  

<br/><br/>
<table style="width:100%;border:none;margin:10px;" cellspacing="0" cellpadding="0">
  <tr>
	<td>
	Class of | metaclass
	</td>
  </tr>
</table>
	
<pre><span id="code" class="language-css">Smart pascal source code</span><br>
<code class="delphi" style="background-color: #FFFEEB;">
type
  TBase = class
    Field: string;
    constructor Create; virtual;
  end;

constructor TBase.Create;
begin
  Field := 'Hello';
end;

type
  TChild = class(TBase)
    constructor Create; override;
  end;

constructor TChild.Create;
begin
  Field := 'World';
end;

type
  TBaseClass = class of TBase;

{ TEST II }
Type
 TBaseClass2 = Class
  Constructor Create;// Virtual;
  Begin
   WriteLn(ClassName);
  End;
End;

Type
 TDescendant = Class(TBaseClass2)
End;

Type
 TClassRef = Class Of TBaseClass2;

{ TEST III }
type
  TMyControl = TObject;
type
  TMyControlClass = class of TMyControl;
type
   TMySubControl = class (TMyControl);

   
{ main.pas }

var
  meta: TBaseClass;
  obj1: TBase;
  cr : TClassRef;

Begin
  if Assigned(meta) then
    Writeln('Assigned bug');

  meta := TBase;

  if not Assigned(meta) then
    Writeln('Not Assigned bug');

  obj1 := meta.Create;
  meta := TChild;

var
  obj2 = meta.Create;

  if meta = TBase then
    Writeln('Bug Equal TBase');
  if meta <> TChild then
    Writeln('Bug Not Equal TChild');

  Writeln(obj1.Field);
  Writeln(obj2.Field);

  meta := nil;

  if Assigned(meta) then
    Writeln('Clear Assigned bug');
{ ### CONSOLE OUTPUTS ###
  Hello
  World
}

{ TEST II }
cr := TDescendant;
cr.Create;
{ ### CONSOLE OUTPUTS ###
  TDescendant
}
{ TEST III }
WriteLn(TMyControl.ClassName);
WriteLn(TMyControlClass.ClassName);
WriteLn(TMySubControl.ClassName);
{ ### CONSOLE OUTPUTS ###
  TObject
  TObject
  TMySubControl
}

</code></pre>
<button type="button" id="checkoutbutton">Show JS code</button>
<div id="widget" style="display:none;">
<pre>
<code class="javascript">
var Exception={
	$ClassName: "Exception",
	$Parent: TObject,
	$Init: function () { FMessage="" },
	Create: function (s,Msg) { s.FMessage=Msg; return s }
}
function $NewDyn(c,z) {
	if (c==null) throw Exception.Create($New(Exception),"ClassType is nil"+z);
	var i={ClassType:c};
	c.$Init(i);
	return i
}

      var meta = null;
      var obj1 = null;
      var cr = null;
      var obj2 = null;
      if (meta) {
         WriteLn("Assigned bug");
      }
      meta = TBase;
      if (!meta) {
         WriteLn("Not Assigned bug");
      }
      obj1 = TBase.Create$6$($NewDyn(meta,""));
      meta = TChild;
      obj2 = TBase.Create$6$($NewDyn(meta,""));
      if (meta==TBase) {
         WriteLn("Bug Equal TBase");
      }
      if (meta!=TChild) {
         WriteLn("Bug Not Equal TChild");
      }
      WriteLn(obj1.Field);
      WriteLn(obj2.Field);
      meta = null;
      if (meta) {
         WriteLn("Clear Assigned bug");
      }
      cr = TDescendant;
      TBaseClass2.Create$5($NewDyn(cr,""));
      WriteLn(ClassName$1(TObject));
      WriteLn(ClassName$1(TObject));
      WriteLn(ClassName$1(TMySubControl));

/// TMySubControl = class (TObject)
///  [line: 117, column: 4, file: uMain]
var TMySubControl = {
   $ClassName:"TMySubControl",$Parent:TObject
   ,$Init:function ($) {
      TObject.$Init($);
   }
   ,Destroy:TObject.Destroy
};
/// TBaseClass2 = class (TObject)
///  [line: 97, column: 2, file: uMain]
var TBaseClass2 = {
   $ClassName:"TBaseClass2",$Parent:TObject
   ,$Init:function ($) {
      TObject.$Init($);
   }
   /// constructor TBaseClass2.Create()
   ///  [line: 98, column: 15, file: uMain]
   ,Create$5:function(Self) {
      WriteLn(TObject.ClassName(Self.ClassType));
      return Self
   }
   ,Destroy:TObject.Destroy
};
/// TDescendant = class (TBaseClass2)
///  [line: 105, column: 2, file: uMain]
var TDescendant = {
   $ClassName:"TDescendant",$Parent:TBaseClass2
   ,$Init:function ($) {
      TBaseClass2.$Init($);
   }
   ,Destroy:TObject.Destroy
};
/// TBase = class (TObject)
///  [line: 72, column: 3, file: uMain]
var TBase = {
   $ClassName:"TBase",$Parent:TObject
   ,$Init:function ($) {
      TObject.$Init($);
      $.Field = "";
   }
   /// constructor TBase.Create()
   ///  [line: 77, column: 19, file: uMain]
   ,Create$6:function(Self) {
      Self.Field = "Hello";
      return Self
   }
   ,Destroy:TObject.Destroy
   ,Create$6$:function($){return $.ClassType.Create$6($)}
};
/// TChild = class (TBase)
///  [line: 83, column: 3, file: uMain]
var TChild = {
   $ClassName:"TChild",$Parent:TBase
   ,$Init:function ($) {
      TBase.$Init($);
   }
   /// constructor TChild.Create()
   ///  [line: 87, column: 20, file: uMain]
   ,Create$6:function(Self) {
      Self.Field = "World";
      return Self
   }
   ,Destroy:TObject.Destroy
   ,Create$6$:function($){return $.ClassType.Create$6($)}
};

</code></pre></div>
</div>
</body>
</html>
